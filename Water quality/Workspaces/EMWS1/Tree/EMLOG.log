*------------------------------------------------------------*
User:                sbattina
Date:                December 03, 2022
Time:                02:51:02
Site:                70090893
Platform:            X64_SRV19
Maintenance Release: 9.04.01M6P110718
EM Version:          15.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 03, 2022
Time:                02:50:54
*------------------------------------------------------------*
15225  proc freq data=EMWS1.Tree_VariableSet noprint;
15226  table ROLE*LEVEL/out=WORK.TreeMETA;
15227  run;
 
NOTE: There were 11 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
15228  proc print data=WORK.TreeMETA label noobs;
15229  var ROLE LEVEL COUNT;
15230  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15231  title9 ' ';
15232  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15233  run;
 
NOTE: There were 3 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
15234  title10;
 
15235  %let EMNORLEN = %DMNORLEN;
EMWS1.Stat_TRAIN EMWS1.Stat_TRAIN
EMWS1.Stat_TRAIN EMWS1.Stat_TRAIN EMWS1 Stat_TRAIN
EMWS1.Stat_TRAIN EMWS1.Stat_TRAIN
EMWS1.Stat_TRAIN EMWS1.Stat_TRAIN EMWS1 Stat_TRAIN
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='Potability'
                         ROLE='TARGET'
                         LEVEL='BINARY'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL=''
                         FORMAT='BEST12.0'
                         INFORMAT='BEST32.0'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                      )[11275]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
15320  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15321  length ORDER $20;
15322  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15323     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15324  set EMWS1.TREE_POTABILITY_DM( where=(_TYPE_="TARGET"));
15325  NumLevels=2;
15326  select(upcase(ORDER));
15327  when('DESC') ORDER = 'Descending';
15328  when('ASC') ORDER = 'Ascending';
15329  when('FMTDESC') ORDER = 'Formatted Descending';
15330  when('FMTASC') ORDER = 'Formatted Ascending';
15331  otherwise ORDER = 'Descending';
15332  end;
15333  output;
15334  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_POTABILITY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
15335  title9 ' ';
15336  proc print data=WORK.Tree_EVENT noobs label;
15337  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15338  title9 ' ';
15339  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15340  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15341  title10;
 
"No decisions defined for target "Potability"."
15342  proc print data = EMWS1.Tree_Potability_DM noobs label;
15343  var _type_ variable label;
15344  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15345  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15346  title9 ' ';
15347  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15348  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_POTABILITY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15349  title10;
 
15350  %let EMEXCEPTIONSTRING=;
15844  *------------------------------------------------------------*;
15845  * Tree: Generation of macros and macro variables;
15846  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15847  *------------------------------------------------------------*;
 
15848  %let EMEXCEPTIONSTRING=;
15849  *------------------------------------------------------------*;
15850  * TRAIN: Tree;
15851  *------------------------------------------------------------*;
15852  %let EM_ACTION = TRAIN;
15853  %let syscc = 0;
15854  %macro main;
15855
15856    %if %upcase(&EM_ACTION) = CREATE %then %do;
15857      filename temp catalog 'sashelp.emmodl.tree_create.source';
15858      %include temp;
15859      filename temp;
15860
15861      %em_tree_create;
15862    %end;
15863
15864     %else
15865     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15866
15867         filename temp catalog 'sashelp.emmodl.tree_train.source';
15868         %include temp;
15869         filename temp;
15870         %em_tree_train;
15871     %end;
15872
15873    %else
15874    %if %upcase(&EM_ACTION) = SCORE %then %do;
15875      filename temp catalog 'sashelp.emmodl.tree_score.source';
15876      %include temp;
15877      filename temp;
15878
15879      %em_tree_score;
15880
15881    %end;
15882
15883    %else
15884    %if %upcase(&EM_ACTION) = REPORT %then %do;
15885
15886         filename temp catalog 'sashelp.emmodl.tree_report.source';
15887         %include temp;
15888         filename temp;
15889
15890         %em_tree_report;
15891     %end;
15892
15893    %else
15894    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15895
15896         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15897         %include temp;
15898         filename temp;
15899         %EM_TREE_OPENTREEVIEWER;
15900
15901     %end;
15902
15903    %else
15904    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15905
15906         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15907         %include temp;
15908         filename temp;
15909         %EM_TREE_CLOSETREEVIEWER;
15910
15911     %end;
15912
15913
15914     %doendm:
15915  %mend main;
15916
15917  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15919 +%macro em_tree_train;
15921 +   %if &EM_IMPORT_DATA eq %then %do;
15922 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15923 +       %put &em_codebar;
15924 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15925 +       %put &errormsg;
15926 +       %put &em_codebar;
15927 +       %goto doendm;
15928 +   %end;
15929 +   %else
15930 +       %let EMEXCEPTIONSTRING =;
15932 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15933 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15934 +        %put &em_codebar;
15935 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15936 +        %put &errormsg;
15937 +        %put &em_codebar;
15938 +        %goto doendm;
15939 +   %end;
15941 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15942 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15943 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15944 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15945 +        %put &em_codebar;
15946 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15947 +        %put &errormsg;
15948 +        %put &em_codebar;
15949 +        %goto doendm;
15950 +   %end;
15952 +   /* Initialize property macro variables */
15953 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15954 +   %include temp;
15955 +   filename temp;
15957 +   %EM_SetProperties;
15959 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15960 +   %EM_GETNAME(key=EMTREE, type=DATA);
15961 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15962 +     /* if import eq Y and no importtable defined, throw an exception */
15963 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15964 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15965 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15966 +         %put &em_codebar;
15967 +         %put &errmsg;
15968 +         %put &em_codebar;
15969 +         %goto doendm;
15970 +      %end;
15971 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15972 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15973 +         %put &em_codebar;
15974 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15975 +         %put &errormsg;
15976 +         %put &em_codebar;
15977 +         %goto doendm;
15978 +      %end;
15979 +      %else %do;
15980 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15981 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15982 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15983 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15984 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15985 +         %let dsid = %sysfunc(close(&dsid));
15986 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15987 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15988 +            %put &em_codebar;
15989 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15990 +            %put &errormsg;
15991 +            %put &em_codebar;
15992 +            %goto doendm;
15993 +         %end;
15994 +      %end;
15995 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15996 +         proc delete data=&EM_USER_EMTREE;
15997 +         run;
15998 +      %end;
15999 +   %end;
16000 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16001 +      proc delete data=&EM_USER_EMTREE;
16002 +      run;
16003 +   %end;
16005 +   /* load tree macros */
16006 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16007 +   %include temp;
16008 +   filename temp;
16010 +   /* data sets */
16011 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16012 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16013 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16015 +   /* files */
16016 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16018 +   /* check actual num of target levels */
16019 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16020 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16021 +                              nLevel=_nTargetLevel );
16022 +      %if &_nTargetLevel  > 2 %then %do;
16023 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16024 +        %put &em_codebar;
16025 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16026 +        %put &errormsg;
16027 +        %put &em_codebar;
16028 +        %goto doendm;
16029 +      %end;
16030 +   %end;
16032 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16033 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16034 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16035 +        %let costflag=0;
16036 +        data _null_;
16037 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16038 +          if eof then call symput("costflag", _N_);
16039 +        run;
16040 +        %if &costflag gt 0 %then %do;
16041 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16042 +          %put &em_codebar;
16043 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16044 +          %put &errormsg;
16045 +          %put &em_codebar;
16046 +          %goto doendm;
16047 +       %end;
16048 +     %end;
16049 +   %end;
16051 +   /* determine if multiple targets will be processed */
16052 +   %let em_tree_multipleTargets=N;
16053 +   %let em_tree_numTarget = 1;
16054 +   %let em_tree_targetVars=;
16056 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16057 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16058 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16059 +         %let em_tree_multipleTargets=N;
16060 +      %end;
16061 +      %else %do;
16062 +         /* create macro array of targets  */
16063 +         data _null_;
16064 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16065 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16066 +           if eof then
16067 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16068 +        run;
16070 +        %if &em_tree_numTarget gt 1 %then %do;
16071 +           %let em_tree_multipleTargets=Y;
16072 +        %end;
16073 +      %end;
16074 +   %end;
16076 +   /* create view of only necessary variable for performance reasons */
16077 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16078 +   data &tempData / view=&tempData;
16079 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16080 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16081 +       %EM_TARGET
16082 +     %end;
16083 +     %else %do;
16084 +       %if &em_tree_numTarget ne 0 %then %do;
16085 +         %do i=1 %to &em_tree_numTarget;
16086 +            &&em_tree_targetVars&i
16087 +         %end;
16088 +       %end;
16089 +     %end;
16090 +     );
16091 +   run;
16093 +   /* run Tree procedure */
16094 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16096 +   /* Check return code and throw exception if error is detected */
16097 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16098 +   %if &syserr %then %do;
16099 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16100 +     %goto doendm;
16101 +   %end;
16103 +   /* add decision score code if multiple targets are processed */
16104 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16105 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16106 +   %end;
16108 +   /* create outfit dataset if multiple score statements have been executed */
16109 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16111 +   /* create English Rules */
16112 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16113 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16114 +       %em_tree_makeEnglishRules;
16116 +       /* English Rules */
16117 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16119 +     %end;
16120 +   filename x;
16122 +   %doendm:
16123 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16124 +%macro EM_SetProperties;
16126 +   /* train properties */
16127 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16169 +   /* properties for interactive sample */
16170 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16172 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16175 +   /* report properties */
16176 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16183 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16184 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16186 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16187 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16188 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16190 +   /* score properties */
16191 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16192 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16194 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16196 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16197 +  %global &nLevel;
16198 +  proc dmdb batch data=&indata
16199 +    classout=_tmp_dmdbout;
16200 +    class &target;
16201 +  run;
16202 +  data _tmp_dmdbout;
16203 +    set _tmp_dmdbout;
16204 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16205 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16206 +  run;
16207 +  data _null_;
16208 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16209 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16210 +    %let dsid = %sysfunc(close(&dsid));
16211 +     call symput("&nLevel", put(&_obs, Best12.));
16212 +  run;
16214 +  proc datasets lib=work nolist;
16215 +     delete _tmp_dmdbout;
16216 +  run;
16217 +  quit;
16218 +%Mend EM_CheckBinaryTargetLevel;
16221 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16223 +  /* determine the number of obs in training data */
16224 +  proc sql;
16225 +    reset noprint;
16226 +    select count(*) into :em_nobs from &indata;
16227 +  quit;
16229 +  /* determine the number of input variables */
16230 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16231 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16233 +  /* retrieve targetEvent from decmeta */
16234 +  %let targetEvent=;
16235 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16236 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16237 +      data _null_;
16238 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16239 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16240 +      run;
16241 +    %end;
16242 +  %end;
16244 +  /* create targetTable if multipleTar eq Y */
16245 +  data temptarget;
16246 +    set &EM_DATA_VARIABLESET;
16247 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16248 +  run;
16250 + /* data sets */
16251 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16252 + %EM_GETNAME(key=EMTREE,        type=DATA);
16253 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16254 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16255 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16256 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16257 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16258 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16259 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16260 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16262 + /* files */
16263 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16264 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16266 + /* turn on pmml if requested */
16267 + %let nnpmml=0;
16268 + %if %symexist(EM_PMML) %then %do;
16269 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16270 +       %let nnpmml=1;
16272 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16273 +   %end;
16274 +%end;
16276 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16278 +%if &nnpmml or &numClassTarget %then %do;
16280 +    /* create dmdb needed for pmml generation */
16281 +    %let tree_maxlevel = 512;
16282 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16283 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16284 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16285 +      %end;
16286 +    %end;
16287 +    %if &tree_maxlevel gt 0 %then %do;
16288 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16289 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16290 +    %end;
16292 +    %let targetOrderString =;
16293 +    %let targetString = ;
16294 +    data _null_;
16295 +       length orderString nameString $10000;
16296 +       retain orderString nameString;
16297 +       set &em_data_variableset end=eof;
16298 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16299 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16300 +       %end;
16301 +       %else %do;
16302 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16303 +       %end;          select(order);
16304 +         when('')        order ='DESC';
16305 +         when('FMTASC')  order='ASCFMT';
16306 +         when('FMTDESC') order='DESFMT';
16307 +         otherwise;
16308 +       end;
16309 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16310 +       nameString = trim(nameString)!!' '!!trim(NAME);
16312 +       if eof then do;
16313 +          call symput('targetOrderString', trim(orderString));
16314 +          call symput('targetString', trim(nameString));
16315 +       end;
16316 +    run;
16318 +    %let arborkluge= "work._treeDMDB";
16320 +    proc dmdb batch data=&indata
16321 +    %if &nnpmml %then %do;
16322 +        PMML
16323 +    %end;
16324 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16326 +      %if &nnpmml %then %do;
16327 +           %if "%EM_ID" ne "" %then %do;
16328 +             id %EM_ID;
16329 +           %end;
16330 +           %if &EM_NUM_CLASS gt 0 %then %do;
16331 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16332 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16333 +                  &targetOrderString;
16334 +           %end;
16335 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16336 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16337 +           %end;
16338 +           target &targetString %EM_INTERVAL_TARGET;
16339 +           %if "%EM_FREQ" ne "" %then %do;
16340 +             freq %EM_FREQ;
16341 +           %end;
16342 +      %end;
16343 +      %else %do;
16344 +         class  &targetOrderString;
16345 +         target &targetString %EM_INTERVAL_TARGET;
16346 +      %end;
16347 +    run;
16348 +    quit;
16350 +    proc datasets lib=work nolist;
16351 +       delete classout varout;
16352 +    run;
16353 +    quit;
16355 + %end;
16358 + /* run Arbor procedure */
16359 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16360 +  proc arbor data=&INDATA
16362 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16363 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16364 +  %end;
16366 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16367 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16368 +  %end;
16370 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16371 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16372 +  %end;
16374 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16375 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16376 +  %end;
16378 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16379 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16380 +  %end;
16382 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16383 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16384 +  %end;
16385 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16386 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16387 +  %end;
16388 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16389 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16390 +  %end;
16392 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16393 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16394 +      alpha = &EM_PROPERTY_SIGLEVEL
16395 +    %end;
16396 +  %end;
16398 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16399 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16400 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16401 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16402 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16404 +        padjust =
16405 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16406 +          &chaid
16407 +        %end;
16408 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16409 +          DEPTH
16410 +        %end;
16411 +      %end;
16412 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16413 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16414 +         pvars = &num_inputs
16415 +      %end;
16416 +    %end;
16417 +  %end;
16418 +  %else %do;
16419 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16420 +         padjust = NONE
16421 +      %end;
16422 +  %end;
16424 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16425 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16426 +    Maxrules = &num_nrules
16427 +  %end;
16429 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16430 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16431 +    Maxsurrs = &num_nsurrs
16432 +  %end;
16434 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16435 +     Missing=&EM_PROPERTY_MISSINGVALUE
16436 +  %end;
16438 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16439 +     USEVARONCE
16440 +  %end;
16442 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16443 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16444 +  %end;
16447 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16448 +    event = "&targetEvent"
16449 +  %end;
16451 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16452 +     DECSEARCH
16453 +  %end;
16455 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16456 +     PRIORSSEARCH
16457 +  %end;
16459 +  %if &arbor_1 ne %then %do;
16460 +    &arbor_1
16461 +  %end;
16463 +  %if &em_arbor ne %then %do;
16464 +     &em_arbor
16465 +  %end;
16466 +  ;
16467 + %end;
16468 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16469 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16470 +       Performance &EM_PROPERTY_PERFORMANCE
16471 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16472 +         nodesize=&EM_PROPERTY_NODESAMPLE
16473 +       %end;
16474 +       ;
16475 +       interact;
16476 + %end;
16477 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16478 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16479 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16480 +    %put &em_codebar;
16481 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16482 +    %put &errormsg;
16483 +    %put &em_codebar;
16484 +    %goto doendm;
16485 +   %end;
16486 +   %else %do;
16487 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16488 +       Performance &EM_PROPERTY_PERFORMANCE
16489 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16490 +         nodesize=&EM_PROPERTY_NODESAMPLE
16491 +       %end;
16492 +       ;
16493 +       interact;
16494 +   %end;
16495 + %end;
16497 + %else %do;
16498 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16499 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16500 +    %put &em_codebar;
16501 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16502 +    %put &errormsg;
16503 +    %put &em_codebar;
16504 +    %goto doendm;
16505 +   %end;
16506 +   %else %do;
16507 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16508 +       Performance &EM_PROPERTY_PERFORMANCE
16509 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16510 +         nodesize=&EM_PROPERTY_NODESAMPLE
16511 +       %end;
16512 +       ;
16513 +        interact;
16514 +   %end;
16515 + %end;
16517 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16518 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16519 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16520 +    %end;
16522 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16523 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16524 +    %end;
16526 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16527 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16528 +    %end;
16530 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16531 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16532 +    %end;
16534 +    %if "%EM_FREQ" ne "" %then %do;
16535 +       freq %EM_FREQ;
16536 +    %end;
16538 +    %if "&multipleTar" eq "Y" %then %do;
16539 +       /* cycle through all target vars in variableset */
16540 +       %let tdsid = %sysfunc(open(temptarget));
16541 +       %if &tdsid %then %do;
16542 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16543 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16544 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16545 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16546 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16547 +             target &var / level = &lvl
16548 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16549 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16550 +             %end;
16551 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16552 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16553 +             %end;
16554 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16555 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16556 +             %end;
16557 +          %end;
16558 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16559 +       %end;
16560 +       useTarget variable = %EM_TARGET;
16561 +    %end;
16562 +    %else %do;
16563 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16564 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16565 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16566 +      %end;
16567 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16568 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16569 +      %end;
16570 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16571 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16572 +      %end;
16573 +    %end;
16575 +    %if "&multipleTar" eq "N" %then %do;
16576 +      &EM_DEC_STATEMENT;
16577 +    %end;
16579 +    Performance &EM_PROPERTY_PERFORMANCE
16580 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16581 +      nodesize=&EM_PROPERTY_NODESAMPLE
16582 +    %end;
16583 +    ;
16585 +    %if "&intFlag" eq "Y" %then %do;
16586 +       INTERACT Largest;
16587 +       Train maxnewdepth=0;
16588 +    %end;
16590 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16591 +         Assess
16592 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16593 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16594 +              %put &em_codebar;
16595 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16596 +              %put &errormsg;
16597 +              %put &em_codebar;
16598 +            %end;
16599 +            %else %do;
16600 +               Validata=&EM_IMPORT_VALIDATE
16601 +            %end;
16602 +         %end;
16603 +         %else %do;
16604 +           NoValidata
16605 +         %end;
16606 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16607 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16608 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16609 +               %if &dsid %then %do;
16610 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16611 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16612 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16613 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16614 +                   %else %do;
16615 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16616 +                      %else %let measure= MISC;
16617 +                   %end;
16618 +                 %end;
16619 +               %end;
16620 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16621 +            %end;
16622 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16623 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16624 +                 %let measure=ASE;
16625 +              %end;
16626 +              %else %do;
16627 +                 %let measure=MISC;
16628 +              %end;
16629 +            %end;
16630 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16631 +              %let measure=ASE;
16632 +            %end;
16633 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16634 +               %let measure = LIFT;
16635 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16636 +               %if &dsid %then %do;
16637 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16638 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16639 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16640 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16641 +                 %end;
16642 +               %end;
16643 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16644 +            %end;
16645 +            measure=&measure
16646 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16647 +               event = "&targetEvent"
16648 +            %end;
16649 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16650 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16651 +            %end;
16652 +         %end;
16653 +         %if "&multipleTar" eq "N" %then %do;
16654 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16655 +               CV
16656 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16657 +                 CVNITer = &EM_PROPERTY_CVNITER
16658 +               %end;
16659 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16660 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16661 +               %end;
16662 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16663 +                 CVSeed = &EM_PROPERTY_CVSEED
16664 +               %end;
16665 +            %end;
16666 +         %end;
16667 +       %end;
16668 +      ;
16670 +      %if "&intFlag" ne "Y" %then %do;
16671 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16672 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16673 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16674 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16676 +          SUBTREE &subtree
16677 +          %if "&subtree" eq "NLEAVES" %then %do;
16678 +            =&EM_PROPERTY_NSUBTREE
16679 +          %end;
16680 +          ;
16681 +        %end;
16683 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16684 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16685 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16686 +          %end;
16687 +       %end;
16688 +      %end;
16689 + %end;
16692 + MakeMacro nleaves = nleaves;
16693 + save
16694 + %if "&EM_USER_EMTREE" ne "" %then %do;
16695 +   MODEL=&EM_USER_EMTREE
16696 + %end;
16697 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16698 +   SEQUENCE=&EM_USER_OUTSEQ
16699 + %end;
16700 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16701 +   IMPORTANCE=&EM_USER_OUTIMPORT
16702 + %end;
16703 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16704 +   NODESTAT=&EM_USER_OUTNODES
16705 + %end;
16706 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16707 +   SUMMARY=&EM_USER_OUTSUMMARY
16708 + %end;
16709 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16710 +   STATSBYNODE=&EM_USER_OUTSTATS
16711 + %end;
16712 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16713 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16714 + %end;
16715 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16716 +   Pathlistnonmissing=&EM_USER_OUTPATH
16717 + %end;
16718 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16719 +   RULES = &EM_USER_OUTRULES
16720 + %end;
16721 + ;
16723 + %if "&intFlag" ne "Y" %then %do;
16725 +   %let lookupString = ;
16726 +   %if ^%symexist(EM_OPTION) %then
16727 +      %let EM_OPTION=;
16729 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16730 +      %let lookupString = LOOKUP=SELECT;
16731 +   %end;
16733 +   %let codetext=;
16734 +   %let norescodetxt=;
16736 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16737 +     %let codetext=&codetext DUMMY;
16738 +     %let norescodetxt=&norescodetxt DUMMY;
16739 +   %end;
16740 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16741 +     %let codetext=&codetext NOLEAFID;
16742 +     %let norescodetxt=&norescodetxt NOLEAFID;
16743 +   %end;
16744 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16745 +     %let norescodetxt=&norescodetxt NOPRED;
16746 +   %end;
16748 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16749 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16751 +   %if &nnpmml %then %do;
16752 +     code pmml;
16753 +   %end;
16755 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16756 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16757 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16758 +   %end;
16759 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16760 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16761 +   %end;
16762 + %end;
16764 + run;
16765 + quit;
16767 + /*%em_checkerror(); */
16768 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16769 +   /* Delete DMDB catalog */
16770 +   proc datasets lib=work nolist;
16771 +       delete _treeDMDB / mt=cat;
16772 +  run;
16773 +  %end;
16775 + %if &nnpmml %then %do;
16776 +    ods pmml close;
16777 + %end;
16779 +  %doendm:
16781 +%mend em_tree_runTreeProcedure;
16783 +%macro em_tree_createFitStats( multipleTar= );
16786 +  /* create targetTable is multipleTar eq Y */
16787 +  data temptarget;
16788 +    set &EM_DATA_VARIABLESET;
16789 +    where ROLE="TARGET";
16790 +  run;
16792 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16793 +   data &EM_USER_EMOUTFIT;
16794 +     length target $32;
16795 +     merge work.fit_train
16796 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16797 +       work.fit_valid
16798 +     %end;
16799 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16800 +       work.fit_test
16801 +     %end;
16802 +     ;
16803 +     %if "&multipleTar" eq "N" %then %do;
16804 +       target="%EM_TARGET";
16805 +     %end;
16806 +     %else %do;
16807 +       target = _TARGET_;
16808 +     %end;
16809 +     drop _NW_ _SUMW_
16810 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16811 +        _VSUMW_
16812 +     %end;
16813 +     ;
16814 +   run;
16816 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16817 +     proc datasets library=work nolist;
16818 +       delete fit_valid;
16819 +     run;
16820 +   %end;
16821 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16822 +     proc datasets library=work nolist;
16823 +       delete fit_test;
16824 +     run;
16825 +   %end;
16827 +%mend em_tree_createFitStats;
16830 +%macro em_tree_makeEnglishRules;
16832 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16833 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16835 +  /* verify that necessary tables exist and if not, skip processing */
16836 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16837 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16838 +    %goto doendm;
16839 +  %end;
16840 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16841 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16842 +    %goto doendm;
16843 +  %end;
16845 +  /* determine length of variable in outpath dataset */
16846 +  %let vlength= ;
16847 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16848 +  %if &dsid ne %then %do;
16849 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16850 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16851 +  %end;
16852 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16854 +  data tempoutpath;
16855 +    length varname $&vlength;
16856 +    retain varname;
16857 +    set &EM_USER_OUTPATH;
16859 +    if ^missing(variable) then varname=variable;
16860 +    else if ^missing(var_name) then varname=var_name;
16861 +    output;
16862 +  run;
16864 +  /* create an array of generated predicted variable names */
16865 +  %let tree_pred_vars = ;
16866 +  %let tree_pred_label = ;
16867 +  %let numpred= 0;
16868 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16870 +    data _null_;
16871 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16872 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16873 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16874 +     if eof then
16875 +       call symput('numpred', strip(put(_N_, BEST.)));
16876 +    run;
16877 +  %end;
16879 +  /* determine if NPRIORS exists in outnodes  */
16880 +  %local nprior_flag;
16881 +  data _null_;
16882 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16883 +    if eof then do;
16884 +      call symput('nprior_flag', strip(put(npriors, best.)));
16885 +    end;
16886 +  run;
16888 +  proc sort data=tempoutpath; by node; run;
16889 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16891 +  data tempoutpath;
16892 +    merge tempoutpath(in=_a) outnodes(keep= node
16893 +    %if "&nprior_flag" ne "." %then %do;
16894 +      NPRIORS
16895 +    %end;
16896 +    %else %do;
16897 +      N
16898 +    %end;
16899 +    %if &numpred gt 0 %then %do;
16900 +      %do i=1 %to &numpred;
16901 +        &&tree_pred_vars&i
16902 +      %end;
16903 +    %end;
16904 +    );
16905 +    by node;
16906 +    if _a;
16907 +  run;
16909 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16911 +  data _null_;
16912 +    file x;
16913 +    set tempoutpath;
16914 +    by node descending varname;
16915 +    retain origvar oldnode string;
16916 +    length origvar $32 oldnode 8 string $5000;
16918 +    if _N_ = 1 then do;
16919 +      origvar = varname;
16920 +      oldnode = node;
16921 +    end;
16923 +    if first.node then do;
16924 +       put "&EM_CODEBAR";
16925 +       put " Node = " node;
16926 +       put "&EM_CODEBAR";
16927 +    end;
16929 +      if first.varname then do;
16930 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16931 +            if MISSING(CHARACTER_VALUE) then do;
16932 +             if NUMERIC_VALUE ne .  then do;
16933 +              if ^first.node then do;
16934 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16935 +              end;
16936 +              else do;
16937 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16938 +              end;
16939 +             end;
16940 +            end;
16941 +            else do;
16942 +              if ^first.node then do;
16943 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16944 +              end;
16945 +              else do;
16946 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16947 +              end;
16948 +             end;
16949 +         end;
16950 +         else if RELATION in ("=") then do;
16951 +            if ^first.node then do;
16952 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16953 +            end;
16954 +            else do;
16955 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16956 +            end;
16957 +         end;
16958 +         else if RELATION in ("ISMISSING") then do;
16959 +            if ^first.node then do;
16960 +              string = " AND "|| strip(varname) || " equals Missing";
16961 +            end;
16962 +            else do;
16963 +              string = "if "|| strip(varname) ||" equals Missing";
16964 +            end;
16965 +         end;
16966 +         else if RELATION in ("ISNOTMISSING") then do;
16967 +            if ^first.node then do;
16968 +              string = " AND "|| strip(varname) || " equals All Values";
16969 +            end;
16970 +            else do;
16971 +              string = "if "|| strip(varname) ||" equals All Values";
16972 +            end;
16973 +         end;
16974 +         if ^missing(varname) then origvar = varname;
16975 +         oldnode=node;
16977 +      end;
16978 +      else do;
16979 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16980 +          if MISSING(CHARACTER_VALUE) then do;
16981 +           if  NUMERIC_VALUE ne .  then do;
16982 +            if ^MISSING(string) then
16983 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16984 +            else
16985 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16986 +           end;
16987 +          end;
16988 +          else do;
16989 +            if ^MISSING(string) then
16990 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16991 +            else
16992 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16993 +          end;
16995 +         end;
16996 +         else if RELATION in ("=") then do;
16997 +           string = strip(string)||", "||strip(character_value);
16998 +         end;
16999 +         else if RELATION in ("ISMISSING") then do;
17001 +         end;
17002 +         if ^missing(varname) then origvar = varname;
17003 +         oldnode=node;
17004 +      end;
17005 +      if last.varname then do;
17006 +         if RELATION in ("ISMISSING") then do;
17007 +           if ^first.varname then do;
17008 +             string = strip(string) || " or MISSING";
17009 +           end;
17010 +         end;
17011 +         put string;
17012 +         if ^missing(varname) then origvar = varname;
17013 +         oldnode=node;
17014 +      end;
17016 +      if last.node then do;
17017 +         put "then ";
17018 +         put " Tree Node Identifier   = " node;
17020 +         %if "&nprior_flag" ne "." %then %do;
17021 +           put " Number of Observations = " NPRIORS;
17022 +         %end;
17023 +         %else %do;
17024 +           put " Number of Observations = " N;
17025 +         %end;
17027 +         %if &numpred gt 0 %then %do;
17028 +           %do i=1 %to &numpred;
17029 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17030 +           %end;
17031 +         %end;
17033 +         put " ";
17034 +         if ^missing(varname) then origvar = varname;
17035 +         oldnode=node;
17036 +      end;
17038 +  run;
17040 +  proc datasets lib=work nolist;
17041 +    delete tempoutpath outnodes;
17042 +  run;
17044 +  %doendm:
17045 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 2619   Memory used = 511K.
NOTE: View EMWS1.STAT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2619 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2619 observations read from the data set EMWS1.STAT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.STAT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
NOTE: There were 2619 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2619 observations read from the data set EMWS1.STAT_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_POTABILITY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 2619   Memory used = 511K.
NOTE: There were 2619 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2619 observations read from the data set EMWS1.STAT_TRAIN.
NOTE: There were 2619 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1542799 kilobytes of physical memory.
NOTE: Will use 2619 out of 2619 training cases.
NOTE: Using memory pool with 97809408 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 679760 bytes of work memory.
NOTE: The subtree sequence contains 15 subtrees. The largest has 29 nodes and 15 leaves.
NOTE: Using subtree with 23 nodes and 12 leaves.
NOTE: Using subtree with 23 nodes and 12 leaves.
NOTE: Created macro variable NLEAVES equal to 12.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 4 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 799 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 23 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 91 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 171 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 15 observations and 11 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 92 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 12 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 23 observations and 5 variables.
NOTE: External file C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 2619 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2619 observations read from the data set EMWS1.STAT_TRAIN.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
NOTE: View EMWS1.STAT_TEST.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 657 observations read from the data set EMWS1.PART_TEST.
 
 
NOTE: There were 2619 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.44 seconds
      cpu time            0.40 seconds
 
NOTE: There were 2619 observations read from the data set EMWS1.STAT_TRAIN.
NOTE: There were 2619 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.46 seconds
      cpu time            0.42 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 91 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 91 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_POTABILITY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 91 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 91 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 23 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 91 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 23 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 91 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 91 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 91 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=03Dec2022:02:50:57,
      Create Time=03Dec2022:02:50:57
 
NOTE: 146 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 91 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
17047
17048  *------------------------------------------------------------*;
17049  * End TRAIN: Tree;
17050  *------------------------------------------------------------*;
 
17051  *------------------------------------------------------------*;
17052  * Close any missing semi colons;
17053  *------------------------------------------------------------*;
17054  ;
17055  ;
17056  ;
17057  ;
17058  quit;
17059  *------------------------------------------------------------*;
17060  * Close any unbalanced quotes;
17061  *------------------------------------------------------------*;
17062  /*; *"; *'; */
17063  ;
17064  run;
17065  quit;
17066  /* Reset EM Options */
17067  options formchar="|----|+|---+=|-/\<>*";
17068  options nocenter ls=256 ps=10000;
17069  goptions reset=all device=GIF NODISPLAY;
 
ERROR:  Windows error code: 1224 in hc_disk_truncate for C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\tree.sas7bcat, The requested operation cannot be performed on a file with a user-mapped section open.
ERROR:  Windows error code: 1224 in hc_disk_truncate for C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\tree.sas7bcat, The requested operation cannot be performed on a file with a user-mapped section open.
17070  proc sort data=WORK.EM_USER_REPORT;
17071  by ID VIEW;
17072  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
ERROR:  Windows error code: 1224 in hc_disk_truncate for C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\tree.sas7bcat, The requested operation cannot be performed on a file with a user-mapped section open.
*------------------------------------------------------------*
* Score Log
Date:                December 03, 2022
Time:                02:50:58
*------------------------------------------------------------*
17174  %let EMEXCEPTIONSTRING=;
17175  *------------------------------------------------------------*;
17176  * SCORE: Tree;
17177  *------------------------------------------------------------*;
17178  %let EM_ACTION = SCORE;
17179  %let syscc = 0;
17180  %macro main;
17181
17182    %if %upcase(&EM_ACTION) = CREATE %then %do;
17183      filename temp catalog 'sashelp.emmodl.tree_create.source';
17184      %include temp;
17185      filename temp;
17186
17187      %em_tree_create;
17188    %end;
17189
17190     %else
17191     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17192
17193         filename temp catalog 'sashelp.emmodl.tree_train.source';
17194         %include temp;
17195         filename temp;
17196         %em_tree_train;
17197     %end;
17198
17199    %else
17200    %if %upcase(&EM_ACTION) = SCORE %then %do;
17201      filename temp catalog 'sashelp.emmodl.tree_score.source';
17202      %include temp;
17203      filename temp;
17204
17205      %em_tree_score;
17206
17207    %end;
17208
17209    %else
17210    %if %upcase(&EM_ACTION) = REPORT %then %do;
17211
17212         filename temp catalog 'sashelp.emmodl.tree_report.source';
17213         %include temp;
17214         filename temp;
17215
17216         %em_tree_report;
17217     %end;
17218
17219    %else
17220    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17221
17222         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17223         %include temp;
17224         filename temp;
17225         %EM_TREE_OPENTREEVIEWER;
17226
17227     %end;
17228
17229    %else
17230    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17231
17232         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17233         %include temp;
17234         filename temp;
17235         %EM_TREE_CLOSETREEVIEWER;
17236
17237     %end;
17238
17239
17240     %doendm:
17241  %mend main;
17242
17243  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17245 +%macro em_tree_score;
17247 +   /* determine if multiple targets will be processed */
17248 +   %let em_tree_multipleTargets=N;
17249 +   %let em_tree_numTarget=1;
17250 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17251 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17252 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17253 +         %let em_tree_multipleTargets=N;
17254 +      %end;
17255 +      %else %do;
17256 +         /* create macro array of targets  */
17257 +         data _null_;
17258 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17259 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17260 +           if eof then
17261 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17262 +        run;
17264 +        %if &em_tree_numTarget gt 1 %then %do;
17265 +           %let em_tree_multipleTargets=Y;
17266 +        %end;
17267 +      %end;
17268 +   %end;
17270 +   /* build flow and publish scoring code */
17271 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17272 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17274 +   filename treeflow "&EM_USER_TREEFLOW";
17275 +   filename treepub "&EM_USER_TREEPUBLISH";
17277 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17278 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17280 +   %em_copyfile(infref=treeflow, outfref=flowref);
17281 +   %em_copyfile(infref=treepub, outfref=pubref);
17283 +   filename treeflow;
17284 +   filename treepub;
17286 +   /* if priors are used, add code to generate unadjusted residuals in export */
17287 +   %let useAdjPriors = N;
17288 +   data _null_;
17289 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17290 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17291 +   run;
17292 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17293 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17294 +      %include temp;
17295 +      filename temp;
17297 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17298 +      filename adjref "&EM_USER_adjResidualCode";
17299 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17301 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17303 +      filename adjref;
17304 +   %end;
17306 +   /* LEAF */
17307 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17308 +      data _null_;
17309 +        file flowref mod;
17310 +        put 'drop _LEAF_;';
17311 +      run;
17313 +      data _null_;
17314 +        file pubref mod;
17315 +        put 'drop _LEAF_;';
17316 +      run;
17318 +   %end;
17320 +   filename flowref;
17321 +   filename pubref;
17323 +   /* em_metachange code */
17324 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17325 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17326 +   %end;
17328 +   /* variable selection based on importance stat    */
17329 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17330 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17331 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17332 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17333 +     %let obs = %sysfunc(fetch(&dsid));
17334 +     %do %while(&obs=0);
17335 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17336 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17337 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17338 +       %let obs = %sysfunc(fetch(&dsid));
17339 +     %end;
17340 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17341 +   %end;
17343 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17344 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17345 +    %let tree_pred_vars = ;
17346 +    %let tree_pred_lvl =;
17347 +    %let numpred= 0;
17349 +    data _null_;
17350 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17351 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17352 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17353 +     if eof then
17354 +       call symput('numpred', strip(put(_N_, BEST.)));
17355 +    run;
17356 +   %end;
17358 +   %if &numpred ne 0 %then %do;
17359 +    %do i=1 %to &numpred;
17360 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17361 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17362 +    %end;
17363 +   %end;
17365 +   /* determine if multiple targets will be processed */
17366 +   %let em_tree_multipleTargets=N;
17367 +   %let em_tree_numTarget=1;
17368 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17369 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17370 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17371 +         %let em_tree_multipleTargets=N;
17372 +      %end;
17373 +      %else %do;
17374 +        data _null_;
17375 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17376 +          if eof then
17377 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17378 +        run;
17380 +        %if &em_tree_numTarget gt 1 %then %do;
17381 +           %let em_tree_multipleTargets=Y;
17382 +        %end;
17383 +     %end;
17384 +   %end;
17386 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17387 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17389 +      /* variable importance */
17390 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17391 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17393 +         %let validexist=0;
17394 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17395 +           %let validexist=1;
17396 +         %end;
17398 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17399 +         /* and the columns may not be generated                                                                                 */
17400 +         %let em_tree_cvexists=;
17401 +         %let em_tree_surrexists=.;
17402 +         data _null_;
17403 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17404 +            if eof then do ;
17405 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17406 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17407 +            end;
17408 +         run;
17410 +         data &EM_USER_OUTIMPORT;
17411 +            set &EM_USER_OUTIMPORT;
17413 +            /* format columns based on Precison value specified */
17414 +            format importance 15.&EM_PROPERTY_PRECISION
17415 +                 %if &validexist %then %do;
17416 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17417 +                 %end;
17418 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17419 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17420 +                 %end;
17421 +            ;
17422 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17423 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17424 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17425 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17426 +                 %if "&em_tree_surrexists" ne "" %then %do;
17427 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17428 +                 %end;
17429 +                 %if &validexist %then %do;
17430 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17431 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17432 +                 %end;
17433 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17434 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17435 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17436 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17437 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17438 +                 %end;
17439 +            ;
17440 +         run;
17442 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17443 +      %end;
17444 +   %end;
17446 +   %doendm:
17447 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03Dec2022:02:50:57,
      Create Time=03Dec2022:02:50:57
 
NOTE: 204 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03Dec2022:02:50:57,
      Create Time=03Dec2022:02:50:57
 
NOTE: 182 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_POTABILITY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=7450,
      Last Modified=03Dec2022:02:50:57,
      Create Time=03Dec2022:02:50:57
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=6755,
      Last Modified=03Dec2022:02:50:57,
      Create Time=03Dec2022:02:50:57
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_POTABILITY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
17448
17449  *------------------------------------------------------------*;
17450  * End SCORE: Tree;
17451  *------------------------------------------------------------*;
 
17452  proc sort data=WORK.EM_METACHANGE;
17453  by key uname;
17454  run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17455  filename x "C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
17456  data _null_;
17457  file x;
17458  put 'if upcase(NAME) = "CONDUCTIVITY" then do;';
17459  put 'ROLE = "REJECTED";';
17460  put 'end;';
17461  put 'else ';
17462  put 'if upcase(NAME) = "Q_POTABILITY0" then do;';
17463  put 'ROLE = "ASSESS";';
17464  put 'end;';
17465  put 'else ';
17466  put 'if upcase(NAME) = "Q_POTABILITY1" then do;';
17467  put 'ROLE = "ASSESS";';
17468  put 'end;';
17469  put 'else ';
17470  put 'if upcase(NAME) = "TRIHALOMETHANES" then do;';
17471  put 'ROLE = "REJECTED";';
17472  put 'end;';
17473  put 'else ';
17474  put 'if upcase(NAME) = "_NODE_" then do;';
17475  put 'ROLE = "SEGMENT";';
17476  put 'LEVEL = "NOMINAL";';
17477  put 'end;';
17478  run;
 
NOTE: The file X is:
      Filename=C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=03Dec2022:02:50:57,
      Create Time=03Dec2022:02:49:58
 
NOTE: 20 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17479  filename x;
NOTE: Fileref X has been deassigned.
 
17480  filename emflow "C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17481  *------------------------------------------------------------*;
17482  * Tree: Scoring DATA data;
17483  *------------------------------------------------------------*;
17484  data EMWS1.Tree_TRAIN
17485  / view=EMWS1.Tree_TRAIN
17486  ;
17487  set EMWS1.Stat_TRAIN
17488  ;
17489  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17490 +****************************************************************;
17491 +******             DECISION TREE SCORING CODE             ******;
17492 +****************************************************************;
17493 +
17494 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17495 +LENGTH F_Potability  $   12;
17496 +LENGTH I_Potability  $   12;
17497 +LENGTH _WARN_  $    4;
17498 +
17499 +******              LABELS FOR NEW VARIABLES              ******;
17500 +label _NODE_ = 'Node' ;
17501 +label _LEAF_ = 'Leaf' ;
17502 +label P_Potability0 = 'Predicted: Potability=0' ;
17503 +label P_Potability1 = 'Predicted: Potability=1' ;
17504 +label Q_Potability0 = 'Unadjusted P: Potability=0' ;
17505 +label Q_Potability1 = 'Unadjusted P: Potability=1' ;
17506 +label R_Potability0 = 'Residual: Potability=0' ;
17507 +label R_Potability1 = 'Residual: Potability=1' ;
17508 +label F_Potability = 'From: Potability' ;
17509 +label I_Potability = 'Into: Potability' ;
17510 +label U_Potability = 'Unnormalized Into: Potability' ;
17511 +label _WARN_ = 'Warnings' ;
17512 +
17513 +
17514 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17515 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17516 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17517 +
17518 +
17519 +_ARBFMT_12 = PUT( Potability , BEST12.);
17520 + %DMNORMCP( _ARBFMT_12, F_Potability );
17521 +
17522 +******             ASSIGN OBSERVATION TO NODE             ******;
17523 +IF  NOT MISSING(Sulfate ) AND
17524 +  Sulfate  <     286.444334038812 THEN DO;
17525 +  IF  NOT MISSING(ph ) AND
17526 +        7.19333774685046 <= ph  THEN DO;
17527 +    IF  NOT MISSING(Turbidity ) AND
17528 +      Turbidity  <     3.15461617527314 THEN DO;
17529 +      _NODE_  =                   10;
17530 +      _LEAF_  =                    6;
17531 +      P_Potability0  =               0.5625;
17532 +      P_Potability1  =               0.4375;
17533 +      Q_Potability0  =               0.5625;
17534 +      Q_Potability1  =               0.4375;
17535 +      I_Potability  = '0' ;
17536 +      U_Potability  =                    0;
17537 +      END;
17538 +    ELSE DO;
17539 +      _NODE_  =                   11;
17540 +      _LEAF_  =                    7;
17541 +      P_Potability0  =     0.12162162162162;
17542 +      P_Potability1  =     0.87837837837837;
17543 +      Q_Potability0  =     0.12162162162162;
17544 +      Q_Potability1  =     0.87837837837837;
17545 +      I_Potability  = '1' ;
17546 +      U_Potability  =                    1;
17547 +      END;
17548 +    END;
17549 +  ELSE DO;
17550 +    IF  NOT MISSING(Solids ) AND
17551 +      Solids  <     19398.8450390458 THEN DO;
17552 +      IF  NOT MISSING(Organic_carbon ) AND
17553 +        Organic_carbon  <     10.7148897100055 THEN DO;
17554 +        _NODE_  =                   16;
17555 +        _LEAF_  =                    1;
17556 +        P_Potability0  =     0.42857142857142;
17557 +        P_Potability1  =     0.57142857142857;
17558 +        Q_Potability0  =     0.42857142857142;
17559 +        Q_Potability1  =     0.57142857142857;
17560 +        I_Potability  = '1' ;
17561 +        U_Potability  =                    1;
17562 +        END;
17563 +      ELSE DO;
17564 +        _NODE_  =                   17;
17565 +        _LEAF_  =                    2;
17566 +        P_Potability0  =     0.89130434782608;
17567 +        P_Potability1  =     0.10869565217391;
17568 +        Q_Potability0  =     0.89130434782608;
17569 +        Q_Potability1  =     0.10869565217391;
17570 +        I_Potability  = '0' ;
17571 +        U_Potability  =                    0;
17572 +        END;
17573 +      END;
17574 +    ELSE DO;
17575 +      IF  NOT MISSING(Hardness ) AND
17576 +        Hardness  <     193.974365294055 THEN DO;
17577 +        IF  NOT MISSING(ph ) AND
17578 +          ph  <     5.40697519851934 THEN DO;
17579 +          _NODE_  =                   24;
17580 +          _LEAF_  =                    3;
17581 +          P_Potability0  =     0.83333333333333;
17582 +          P_Potability1  =     0.16666666666666;
17583 +          Q_Potability0  =     0.83333333333333;
17584 +          Q_Potability1  =     0.16666666666666;
17585 +          I_Potability  = '0' ;
17586 +          U_Potability  =                    0;
17587 +          END;
17588 +        ELSE DO;
17589 +          _NODE_  =                   25;
17590 +          _LEAF_  =                    4;
17591 +          P_Potability0  =     0.14285714285714;
17592 +          P_Potability1  =     0.85714285714285;
17593 +          Q_Potability0  =     0.14285714285714;
17594 +          Q_Potability1  =     0.85714285714285;
17595 +          I_Potability  = '1' ;
17596 +          U_Potability  =                    1;
17597 +          END;
17598 +        END;
17599 +      ELSE DO;
17600 +        _NODE_  =                   19;
17601 +        _LEAF_  =                    5;
17602 +        P_Potability0  =                  0.6;
17603 +        P_Potability1  =                  0.4;
17604 +        Q_Potability0  =                  0.6;
17605 +        Q_Potability1  =                  0.4;
17606 +        I_Potability  = '0' ;
17607 +        U_Potability  =                    0;
17608 +        END;
17609 +      END;
17610 +    END;
17611 +  END;
17612 +ELSE DO;
17613 +  IF  NOT MISSING(Sulfate ) AND
17614 +         363.46745680074 <= Sulfate  THEN DO;
17615 +    IF  NOT MISSING(ph ) AND
17616 +          7.79417057963898 <= ph  THEN DO;
17617 +      IF  NOT MISSING(Chloramines ) AND
17618 +            9.43085791478326 <= Chloramines  THEN DO;
17619 +        _NODE_  =                   23;
17620 +        _LEAF_  =                   12;
17621 +        P_Potability0  =     0.14285714285714;
17622 +        P_Potability1  =     0.85714285714285;
17623 +        Q_Potability0  =     0.14285714285714;
17624 +        Q_Potability1  =     0.85714285714285;
17625 +        I_Potability  = '1' ;
17626 +        U_Potability  =                    1;
17627 +        END;
17628 +      ELSE DO;
17629 +        _NODE_  =                   22;
17630 +        _LEAF_  =                   11;
17631 +        P_Potability0  =     0.82568807339449;
17632 +        P_Potability1  =      0.1743119266055;
17633 +        Q_Potability0  =     0.82568807339449;
17634 +        Q_Potability1  =      0.1743119266055;
17635 +        I_Potability  = '0' ;
17636 +        U_Potability  =                    0;
17637 +        END;
17638 +      END;
17639 +    ELSE DO;
17640 +      _NODE_  =                   14;
17641 +      _LEAF_  =                   10;
17642 +      P_Potability0  =     0.43567251461988;
17643 +      P_Potability1  =     0.56432748538011;
17644 +      Q_Potability0  =     0.43567251461988;
17645 +      Q_Potability1  =     0.56432748538011;
17646 +      I_Potability  = '1' ;
17647 +      U_Potability  =                    1;
17648 +      END;
17649 +    END;
17650 +  ELSE DO;
17651 +    IF  NOT MISSING(Hardness ) AND
17652 +      Hardness  <     101.118201096076 THEN DO;
17653 +      _NODE_  =                   12;
17654 +      _LEAF_  =                    8;
17655 +      P_Potability0  =                    0;
17656 +      P_Potability1  =                    1;
17657 +      Q_Potability0  =                    0;
17658 +      Q_Potability1  =                    1;
17659 +      I_Potability  = '1' ;
17660 +      U_Potability  =                    1;
17661 +      END;
17662 +    ELSE DO;
17663 +      _NODE_  =                   13;
17664 +      _LEAF_  =                    9;
17665 +      P_Potability0  =     0.65430809399477;
17666 +      P_Potability1  =     0.34569190600522;
17667 +      Q_Potability0  =     0.65430809399477;
17668 +      Q_Potability1  =     0.34569190600522;
17669 +      I_Potability  = '0' ;
17670 +      U_Potability  =                    0;
17671 +      END;
17672 +    END;
17673 +  END;
17674 +
17675 +*****  RESIDUALS R_ *************;
17676 +IF  F_Potability  NE '0'
17677 +AND F_Potability  NE '1'  THEN DO;
17678 +        R_Potability0  = .;
17679 +        R_Potability1  = .;
17680 + END;
17681 + ELSE DO;
17682 +       R_Potability0  =  -P_Potability0 ;
17683 +       R_Potability1  =  -P_Potability1 ;
17684 +       SELECT( F_Potability  );
17685 +          WHEN( '0'  ) R_Potability0  = R_Potability0  +1;
17686 +          WHEN( '1'  ) R_Potability1  = R_Potability1  +1;
17687 +       END;
17688 + END;
17689 +
17690 +****************************************************************;
17691 +******          END OF DECISION TREE SCORING CODE         ******;
17692 +****************************************************************;
17693 +
17694 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17695  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.STAT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
17696  quit;
17697  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17698  filename emflow "C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17699  *------------------------------------------------------------*;
17700  * Tree: Scoring TEST data;
17701  *------------------------------------------------------------*;
17702  data EMWS1.Tree_TEST
17703  / view=EMWS1.Tree_TEST
17704  ;
17705  set EMWS1.Stat_TEST
17706  ;
17707  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17708 +****************************************************************;
17709 +******             DECISION TREE SCORING CODE             ******;
17710 +****************************************************************;
17711 +
17712 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17713 +LENGTH F_Potability  $   12;
17714 +LENGTH I_Potability  $   12;
17715 +LENGTH _WARN_  $    4;
17716 +
17717 +******              LABELS FOR NEW VARIABLES              ******;
17718 +label _NODE_ = 'Node' ;
17719 +label _LEAF_ = 'Leaf' ;
17720 +label P_Potability0 = 'Predicted: Potability=0' ;
17721 +label P_Potability1 = 'Predicted: Potability=1' ;
17722 +label Q_Potability0 = 'Unadjusted P: Potability=0' ;
17723 +label Q_Potability1 = 'Unadjusted P: Potability=1' ;
17724 +label R_Potability0 = 'Residual: Potability=0' ;
17725 +label R_Potability1 = 'Residual: Potability=1' ;
17726 +label F_Potability = 'From: Potability' ;
17727 +label I_Potability = 'Into: Potability' ;
17728 +label U_Potability = 'Unnormalized Into: Potability' ;
17729 +label _WARN_ = 'Warnings' ;
17730 +
17731 +
17732 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17733 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17734 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17735 +
17736 +
17737 +_ARBFMT_12 = PUT( Potability , BEST12.);
17738 + %DMNORMCP( _ARBFMT_12, F_Potability );
17739 +
17740 +******             ASSIGN OBSERVATION TO NODE             ******;
17741 +IF  NOT MISSING(Sulfate ) AND
17742 +  Sulfate  <     286.444334038812 THEN DO;
17743 +  IF  NOT MISSING(ph ) AND
17744 +        7.19333774685046 <= ph  THEN DO;
17745 +    IF  NOT MISSING(Turbidity ) AND
17746 +      Turbidity  <     3.15461617527314 THEN DO;
17747 +      _NODE_  =                   10;
17748 +      _LEAF_  =                    6;
17749 +      P_Potability0  =               0.5625;
17750 +      P_Potability1  =               0.4375;
17751 +      Q_Potability0  =               0.5625;
17752 +      Q_Potability1  =               0.4375;
17753 +      I_Potability  = '0' ;
17754 +      U_Potability  =                    0;
17755 +      END;
17756 +    ELSE DO;
17757 +      _NODE_  =                   11;
17758 +      _LEAF_  =                    7;
17759 +      P_Potability0  =     0.12162162162162;
17760 +      P_Potability1  =     0.87837837837837;
17761 +      Q_Potability0  =     0.12162162162162;
17762 +      Q_Potability1  =     0.87837837837837;
17763 +      I_Potability  = '1' ;
17764 +      U_Potability  =                    1;
17765 +      END;
17766 +    END;
17767 +  ELSE DO;
17768 +    IF  NOT MISSING(Solids ) AND
17769 +      Solids  <     19398.8450390458 THEN DO;
17770 +      IF  NOT MISSING(Organic_carbon ) AND
17771 +        Organic_carbon  <     10.7148897100055 THEN DO;
17772 +        _NODE_  =                   16;
17773 +        _LEAF_  =                    1;
17774 +        P_Potability0  =     0.42857142857142;
17775 +        P_Potability1  =     0.57142857142857;
17776 +        Q_Potability0  =     0.42857142857142;
17777 +        Q_Potability1  =     0.57142857142857;
17778 +        I_Potability  = '1' ;
17779 +        U_Potability  =                    1;
17780 +        END;
17781 +      ELSE DO;
17782 +        _NODE_  =                   17;
17783 +        _LEAF_  =                    2;
17784 +        P_Potability0  =     0.89130434782608;
17785 +        P_Potability1  =     0.10869565217391;
17786 +        Q_Potability0  =     0.89130434782608;
17787 +        Q_Potability1  =     0.10869565217391;
17788 +        I_Potability  = '0' ;
17789 +        U_Potability  =                    0;
17790 +        END;
17791 +      END;
17792 +    ELSE DO;
17793 +      IF  NOT MISSING(Hardness ) AND
17794 +        Hardness  <     193.974365294055 THEN DO;
17795 +        IF  NOT MISSING(ph ) AND
17796 +          ph  <     5.40697519851934 THEN DO;
17797 +          _NODE_  =                   24;
17798 +          _LEAF_  =                    3;
17799 +          P_Potability0  =     0.83333333333333;
17800 +          P_Potability1  =     0.16666666666666;
17801 +          Q_Potability0  =     0.83333333333333;
17802 +          Q_Potability1  =     0.16666666666666;
17803 +          I_Potability  = '0' ;
17804 +          U_Potability  =                    0;
17805 +          END;
17806 +        ELSE DO;
17807 +          _NODE_  =                   25;
17808 +          _LEAF_  =                    4;
17809 +          P_Potability0  =     0.14285714285714;
17810 +          P_Potability1  =     0.85714285714285;
17811 +          Q_Potability0  =     0.14285714285714;
17812 +          Q_Potability1  =     0.85714285714285;
17813 +          I_Potability  = '1' ;
17814 +          U_Potability  =                    1;
17815 +          END;
17816 +        END;
17817 +      ELSE DO;
17818 +        _NODE_  =                   19;
17819 +        _LEAF_  =                    5;
17820 +        P_Potability0  =                  0.6;
17821 +        P_Potability1  =                  0.4;
17822 +        Q_Potability0  =                  0.6;
17823 +        Q_Potability1  =                  0.4;
17824 +        I_Potability  = '0' ;
17825 +        U_Potability  =                    0;
17826 +        END;
17827 +      END;
17828 +    END;
17829 +  END;
17830 +ELSE DO;
17831 +  IF  NOT MISSING(Sulfate ) AND
17832 +         363.46745680074 <= Sulfate  THEN DO;
17833 +    IF  NOT MISSING(ph ) AND
17834 +          7.79417057963898 <= ph  THEN DO;
17835 +      IF  NOT MISSING(Chloramines ) AND
17836 +            9.43085791478326 <= Chloramines  THEN DO;
17837 +        _NODE_  =                   23;
17838 +        _LEAF_  =                   12;
17839 +        P_Potability0  =     0.14285714285714;
17840 +        P_Potability1  =     0.85714285714285;
17841 +        Q_Potability0  =     0.14285714285714;
17842 +        Q_Potability1  =     0.85714285714285;
17843 +        I_Potability  = '1' ;
17844 +        U_Potability  =                    1;
17845 +        END;
17846 +      ELSE DO;
17847 +        _NODE_  =                   22;
17848 +        _LEAF_  =                   11;
17849 +        P_Potability0  =     0.82568807339449;
17850 +        P_Potability1  =      0.1743119266055;
17851 +        Q_Potability0  =     0.82568807339449;
17852 +        Q_Potability1  =      0.1743119266055;
17853 +        I_Potability  = '0' ;
17854 +        U_Potability  =                    0;
17855 +        END;
17856 +      END;
17857 +    ELSE DO;
17858 +      _NODE_  =                   14;
17859 +      _LEAF_  =                   10;
17860 +      P_Potability0  =     0.43567251461988;
17861 +      P_Potability1  =     0.56432748538011;
17862 +      Q_Potability0  =     0.43567251461988;
17863 +      Q_Potability1  =     0.56432748538011;
17864 +      I_Potability  = '1' ;
17865 +      U_Potability  =                    1;
17866 +      END;
17867 +    END;
17868 +  ELSE DO;
17869 +    IF  NOT MISSING(Hardness ) AND
17870 +      Hardness  <     101.118201096076 THEN DO;
17871 +      _NODE_  =                   12;
17872 +      _LEAF_  =                    8;
17873 +      P_Potability0  =                    0;
17874 +      P_Potability1  =                    1;
17875 +      Q_Potability0  =                    0;
17876 +      Q_Potability1  =                    1;
17877 +      I_Potability  = '1' ;
17878 +      U_Potability  =                    1;
17879 +      END;
17880 +    ELSE DO;
17881 +      _NODE_  =                   13;
17882 +      _LEAF_  =                    9;
17883 +      P_Potability0  =     0.65430809399477;
17884 +      P_Potability1  =     0.34569190600522;
17885 +      Q_Potability0  =     0.65430809399477;
17886 +      Q_Potability1  =     0.34569190600522;
17887 +      I_Potability  = '0' ;
17888 +      U_Potability  =                    0;
17889 +      END;
17890 +    END;
17891 +  END;
17892 +
17893 +*****  RESIDUALS R_ *************;
17894 +IF  F_Potability  NE '0'
17895 +AND F_Potability  NE '1'  THEN DO;
17896 +        R_Potability0  = .;
17897 +        R_Potability1  = .;
17898 + END;
17899 + ELSE DO;
17900 +       R_Potability0  =  -P_Potability0 ;
17901 +       R_Potability1  =  -P_Potability1 ;
17902 +       SELECT( F_Potability  );
17903 +          WHEN( '0'  ) R_Potability0  = R_Potability0  +1;
17904 +          WHEN( '1'  ) R_Potability1  = R_Potability1  +1;
17905 +       END;
17906 + END;
17907 +
17908 +****************************************************************;
17909 +******          END OF DECISION TREE SCORING CODE         ******;
17910 +****************************************************************;
17911 +
17912 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17913  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.STAT_TEST.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
17914  quit;
17915  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
17917  proc sort data=WORK.EM_USER_REPORT;
17918  by ID VIEW;
17919  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17920  *------------------------------------------------------------*;
17921  * Tree: Computing metadata for TRAIN data;
17922  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.09 seconds
 
18287  data EMWS1.Tree_EMINFO;
18288  length TARGET KEY $32 DATA $43;
18289  input TARGET KEY DATA $;
18290  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18294  run;
18295  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
18296  by TARGET KEY;
18297  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: View EMWS1.TREE_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 03, 2022
Time:                02:50:59
*------------------------------------------------------------*
18321  data EMWS1.Tree_EMOUTFIT;
18322  set EMWS1.Tree_EMOUTFIT;
18323  length TargetLabel $200;
18324  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18325  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18326  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18327  by TARGET;
18328  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18329  %let _EMwarndup = 0;
18330  %let _EMtargetdup =;
18331  %let _EMASEtargetdup =;
18332  data _null_;
18333  set EMWS1.Tree_EMOUTFIT;
18334  if .<_ASE_<0.000001 then do;
18335  call symput('_EMwarndup', '1');
18336  call symput('_EMtargetdup', target);
18337  call symput('_EMASEtargetdup', put(_ASE_, best.));
18338  end;
18339  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18340  %let EMEXCEPTIONSTRING=;
18341  *------------------------------------------------------------*;
18342  * REPORT: Tree;
18343  *------------------------------------------------------------*;
18344  %let EM_ACTION = REPORT;
18345  %let syscc = 0;
18346  %macro main;
18347
18348    %if %upcase(&EM_ACTION) = CREATE %then %do;
18349      filename temp catalog 'sashelp.emmodl.tree_create.source';
18350      %include temp;
18351      filename temp;
18352
18353      %em_tree_create;
18354    %end;
18355
18356     %else
18357     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18358
18359         filename temp catalog 'sashelp.emmodl.tree_train.source';
18360         %include temp;
18361         filename temp;
18362         %em_tree_train;
18363     %end;
18364
18365    %else
18366    %if %upcase(&EM_ACTION) = SCORE %then %do;
18367      filename temp catalog 'sashelp.emmodl.tree_score.source';
18368      %include temp;
18369      filename temp;
18370
18371      %em_tree_score;
18372
18373    %end;
18374
18375    %else
18376    %if %upcase(&EM_ACTION) = REPORT %then %do;
18377
18378         filename temp catalog 'sashelp.emmodl.tree_report.source';
18379         %include temp;
18380         filename temp;
18381
18382         %em_tree_report;
18383     %end;
18384
18385    %else
18386    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18387
18388         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18389         %include temp;
18390         filename temp;
18391         %EM_TREE_OPENTREEVIEWER;
18392
18393     %end;
18394
18395    %else
18396    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18397
18398         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18399         %include temp;
18400         filename temp;
18401         %EM_TREE_CLOSETREEVIEWER;
18402
18403     %end;
18404
18405
18406     %doendm:
18407  %mend main;
18408
18409  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18411 +%macro em_tree_makePlotDs( multipleTar= );
18413 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18414 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18415 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18416 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18418 +  /* determine if validation statistics will be displayed */
18419 +  %let validflag=N;
18420 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18421 +    /* determine if validation data exists */
18422 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18423 +      %let validflag=Y;
18424 +    %end;
18425 +  %end;
18427 +   /* retrieve name of decmeta even in presence of multiple targets */
18428 +   %let decmeta = ;
18429 +   %if &EM_DEC_DECMETA eq %then %do;
18430 +     data _Target;
18431 +       set &em_data_variableset;
18432 +       where ROLE='TARGET' and USE in('D', 'Y');
18433 +       keep NAME;
18434 +     run;
18435 +     proc sort data=_Target;
18436 +       by NAME;
18437 +     run;
18438 +     proc sort data=EM_TARGETDECINFO;
18439 +       by TARGET;
18440 +     run;
18441 +     data _Target;
18442 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18443 +       by NAME;
18444 +       if _a then do;
18445 +         call symput('decmeta', trim(DECMETA));
18446 +       end;
18447 +     run;
18448 +     proc delete data=_Target;run;
18449 +   %end;
18450 +   %else %let decmeta = &EM_DEC_DECMETA;
18453 +  /* retrieve targetEvent from decmeta */
18454 +  %let targetEvent=;
18455 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18456 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18457 +      data _null_;
18458 +       set &DECMETA(where=(_TYPE_="TARGET"));
18459 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18460 +      run;
18461 +    %end;
18462 +  %end;
18464 +  /* retrieve predicted var for targetEvent from decmeta */
18465 +  %let predTarget=;
18466 +  %let predLvl=;
18467 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18468 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18469 +      data _null_;
18470 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18471 +       call symput('predTarget', strip(VARIABLE));
18472 +       call symput('predLvl', strip(LEVEL));
18473 +      run;
18474 +    %end;
18475 +  %end;
18476 +  %else %do;
18477 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18478 +      data _null_;
18479 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18480 +       call symput('predTarget', strip(VARIABLE));
18481 +      run;
18482 +    %end;
18483 +  %end;
18485 +  /* create BelowText value */
18486 +  data belowtext;
18487 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18488 +    keep node belowtext;
18489 +  run;
18491 +  /* replace belowtext with variable label if it exists */
18492 +  data belowtext2;
18493 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18494 +    keep node belowtextlbl;
18495 +  run;
18497 +  proc sort data=belowtext; by node; run;
18498 +  proc sort data=belowtext2; by node; run;
18500 +  data belowtext;
18501 +    merge belowtext belowtext2(in=_a);
18502 +    by node;
18503 +    if _a then belowtext=belowtextlbl;
18504 +    keep node belowtext;
18505 +  run;
18507 +  /* create AboveText value */
18508 +  data abovetext;
18509 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18510 +  run;
18511 +  proc sort data=abovetext; by node numeric_value; run;
18513 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18514 +  data abovetext;
18515 +    set abovetext(rename=(node=parent));
18516 +    by parent numeric_value;
18517 +    retain abovetext tempstring flag branch origval origchar ;
18518 +    length abovetext $256;
18519 +    length tempstring origchar $64;
18521 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18522 +      if first.parent then do;
18523 +        if missing(character_value) then do;
18524 +          numeric_value = round(numeric_value, &sp_precision);
18525 +          abovetext = "< "||strip(NUMERIC_VALUE);
18526 +          branch = 1;
18527 +          origval = numeric_value;
18528 +          output;
18529 +        end;
18530 +        else do;
18531 +          abovetext = "< "||strip(CHARACTER_VALUE);
18532 +          branch = 1;
18533 +          origchar = character_value;
18534 +          output;
18535 +        end;
18537 +        if first.parent AND last.parent then do;
18538 +          if missing(character_value) then do;
18539 +            numeric_value = round(numeric_value, &sp_precision);
18540 +            branch = branch + 1;
18541 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18542 +            output;
18543 +          end;
18544 +          else do;
18545 +            branch = branch + 1;
18546 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18547 +            output;
18548 +          end;
18549 +        end;
18550 +      end;
18551 +      else if last.parent then do;
18552 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18553 +          if missing(character_value) then do;
18554 +            numeric_value = round(numeric_value, &sp_precision);
18555 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18556 +          end;
18557 +          else do;
18558 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18559 +          end;
18560 +          branch = branch + 1;
18561 +          output;
18563 +          if missing(character_value) then do;
18564 +            numeric_value = round(numeric_value, &sp_precision);
18565 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18566 +          end;
18567 +          else do;
18568 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18569 +          end;
18570 +          branch = branch + 1;
18571 +          output;
18572 +        end;
18573 +        else do;
18574 +          if missing(character_value) then do;
18575 +            numeric_value = round(numeric_value, &sp_precision);
18576 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18577 +          end;
18578 +          else do;
18579 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18580 +          end;
18581 +          branch = branch + 1;
18582 +          output;
18583 +        end;
18584 +      end;
18585 +      else do;
18586 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18587 +          if missing(character_value) then do;
18588 +            numeric_value = round(numeric_value,&sp_precision);
18589 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18590 +            origval = numeric_value;
18591 +          end;
18592 +          else do;
18593 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18594 +            origchar = character_value;
18595 +          end;
18596 +          branch = branch + 1;
18597 +          output;
18599 +        end;
18600 +        else do;
18601 +          if missing(character_value) then do;
18602 +            numeric_value = round(numeric_value, &sp_precision);
18603 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18604 +            origval = numeric_value;
18605 +          end;
18606 +          else do;
18607 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18608 +            origval = character_value;
18609 +          end;
18610 +          branch = branch + 1;
18611 +          output;
18612 +        end;
18613 +      end;
18614 +    end;
18615 +    else do;
18616 +       if first.numeric_value then do;
18617 +         flag = 0;
18618 +         abovetext = strip(CHARACTER_VALUE);
18619 +         branch = numeric_value;
18620 +         if first.numeric_value AND last.numeric_value then do;
18621 +           output;
18622 +         end;
18623 +       end;
18624 +       else if last.numeric_value then do;
18625 +         if flag=0 then do;
18626 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18627 +           length = length(strip(tempstring));
18628 +           if length < 32 then do;
18629 +             abovetext = strip(tempstring);
18630 +           end;
18631 +           else do;
18632 +             abovetext = strip(abovetext)||", ...";
18633 +             flag = 1;
18634 +           end;
18635 +         end;
18636 +         branch = numeric_value;
18637 +         output;
18638 +       end;
18639 +       else do;
18640 +         if flag=0 then do;
18641 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18642 +           length = length(strip(tempstring));
18643 +           if length < 32 then do;
18644 +             abovetext = strip(tempstring);
18645 +           end;
18646 +           else do;
18647 +             abovetext = strip(abovetext)||", ...";
18648 +             flag=1;
18649 +           end;
18650 +         end;
18651 +         branch = numeric_value;
18652 +       end;
18653 +    end;
18654 +    keep parent branch abovetext;
18655 +  run;
18657 +  /* Missing value to abovetext */
18658 +  data tempmissing;
18659 +    set &EM_USER_OUTRULES;
18660 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18661 +    rename node=parent numeric_value=branch character_value=misschar;
18662 +  run;
18665 +  proc sort data=abovetext; by parent branch; run;
18666 +  proc sort data=tempmissing; by parent branch; run;
18667 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18669 +  data tempoutnodes;
18670 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18671 +    by parent branch;
18672 +    length traintotal validtotal 8;
18673 +    retain traintotal validtotal;
18675 +    if _a then do;
18676 +      if ^MISSING(abovetext) then do;
18677 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18678 +      end;
18679 +      else do;
18680 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18681 +      end;
18682 +    end;
18683 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18685 +    if node=1 then do;
18686 +      traintotal = N;
18687 +      validtotal=VN;
18688 +    end;
18690 +    drop role rank stat misschar belowtext;
18691 +  run;
18692 +  proc sort data=tempoutnodes; by node; run;
18693 +  proc sort data=belowtext; by node; run;
18695 +  data tempoutnodes;
18696 +    merge tempoutnodes belowtext;
18697 +    by node;
18699 +  run;
18701 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18702 +  %let adjusted = N;
18703 +  %let npriors = 0;
18704 +  data _null_ ;
18705 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18706 +    if eof then do ;
18707 +      call symput("npriors" , strip(put(_N_,best.))) ;
18708 +    end;
18709 +  run;
18710 +  %if &npriors gt 0 %then %let adjusted=Y;
18713 +  /* create a table with targetUsed and targetLevel columns for each node */
18714 +  data temptarmeta;
18715 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18716 +    %if &multipleTar eq N %then %do;
18717 +      AND USE in ('D', 'Y')
18718 +    %end;
18719 +    ));
18720 +    length TARGET $32;
18721 +    Target=name;
18722 +    keep target level;
18723 +  run;
18725 +  %if &multipleTar eq Y %then %do;
18726 +    data temptargetused;
18727 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18728 +      keep node target;
18729 +    run;
18730 +    proc sort data=temptargetused; by target; run;
18731 +    proc sort data=temptarmeta; by target; run;
18732 +    data temptargetused;
18733 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18734 +      by target;
18735 +      if _a and _b;
18736 +    run;
18737 +  %end;
18738 +  %else %do;
18739 +    data temptargetused;
18740 +      set &EM_USER_OUTSTATS;
18741 +      length target $32 tarlevel $10;
18742 +      target="%EM_TARGET";
18743 +      tarlevel="%EM_TARGET_LEVEL";
18744 +      keep node target tarlevel;
18745 +    run;
18746 +    proc sort data=temptargetused nodupkey; by node; run;
18747 +  %end;
18749 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18750 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18751 +  proc sort data=temptargetused; by node; run;
18754 +  /* create tables for all interval targets as well as all class targets */
18755 +  data tempinterval tempclass;
18756 +    merge tempoutstats temptargetused( rename=(target=targetused));
18757 +    by node;
18758 +    %if "&multipleTar" eq "Y" %then %do;
18759 +      if ((missing(Target)) OR (target=targetused ));
18760 +    %end;
18762 +    if tarlevel="INTERVAL" then output tempinterval;
18763 +    else output tempclass;
18764 +  run;
18766 +  /* initialize intTarget and classTarget flags */
18767 +  %let em_intNobs =0;
18768 +  %let em_classNobs = 0;
18769 +  %let em_intTarget= N;
18770 +  %let em_classTarget= N;
18772 +  proc sql;
18773 +    reset noprint;
18774 +    select count(*) into :em_intNobs from tempinterval;
18775 +  quit;
18776 +  proc sql;
18777 +    reset noprint;
18778 +    select count(*) into :em_classNobs from tempclass;
18779 +  quit;
18781 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18782 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18784 +  /* retrieve all information for interval targets */
18785 +  %if &em_intTarget eq Y %then %do;
18787 +    /* determine if leaf variable exists */
18788 +    %let dsid=%sysfunc(open(tempinterval,i));
18789 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18790 +    %let rc=%sysfunc(close(&dsid));
18792 +    proc transpose data=tempinterval
18793 +      %if &leafexists %then %do;
18794 +        (drop=leaf)
18795 +      %end;
18796 +      %if &validexist %then %do;
18797 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18798 +      %end;
18799 +      %else %do;
18800 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18801 +      %end;
18802 +      by node;
18803 +      id statname;
18804 +    run;
18805 +    data tempinterval;
18806 +      set tempinterval;
18807 +      if missing(N) then delete;
18808 +    run;
18809 +  %end;
18811 +  /* retrieve all information for class targets */
18812 +  %if &em_classTarget eq Y %then %do;
18813 +    proc sort data=tempclass; by node category; run;
18814 +    %if &validflag eq N %then %do;
18815 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18816 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18817 +    %end;
18818 +    %else %do;
18819 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18820 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18821 +    %end;
18822 +      set tempclass;
18824 +      %if &validflag eq N %then %do;
18825 +        %if "&adjusted" eq "N" %then %do;
18826 +          if statname="N" then output tempn;
18827 +        %end;
18828 +        %else %do;
18829 +          if statname="NPRIORS" then output tempn;
18830 +        %end;
18831 +        else if statname="PREDICTION" then output temppredict;
18832 +        else if statname="PROBABILITY" then output tempprob;
18833 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18834 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18835 +      %end;
18836 +      %else %do;
18837 +        %if "&adjusted" eq "N" %then %do;
18838 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18839 +        %end;
18840 +        %else %do;
18841 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18842 +        %end;
18843 +        else if statname="PREDICTION" then output temppredict;
18844 +        else if statname="PROBABILITY" then output tempprob;
18845 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18846 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18847 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18848 +      %end;
18849 +    run;
18852 +    /* determine if profit/loss exists in tempprofit */
18853 +    %let em_profitflag=0;
18854 +    %let em_lossflag=0;
18855 +    proc sql;
18856 +      reset noprint;
18857 +      select count(*) into :em_profitflag from tempprofit;
18858 +    quit;
18859 +    proc sql;
18860 +      reset noprint;
18861 +      select count(*) into :em_lossflag from temploss;
18862 +    quit;
18864 +    %if &validFlag eq Y %then %do;
18865 +      proc transpose data=tempn
18866 +        %if "&adjusted" eq "N" %then %do;
18867 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18868 +        %end;
18869 +        %else %do;
18870 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18871 +        %end;
18872 +        by node;
18873 +        id statname;
18874 +      run;
18875 +      %if &em_profitflag ne 0 %then %do;
18876 +        proc transpose data=tempprofit out=tempprofit;
18877 +          by node category;
18878 +          id statname ;
18879 +        run;
18880 +      %end;
18881 +      %if &em_lossflag ne 0 %then %do;
18882 +        proc transpose data=temploss out=temploss;
18883 +          by node category;
18884 +          id statname ;
18885 +        run;
18886 +      %end;
18887 +      data tempprob;
18888 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18889 +        by node
18890 +        %if &multipleTar eq Y %then %do;
18891 +          target
18892 +        %end;
18893 +        category;
18894 +      run;
18895 +    %end;
18897 +    /* store percentcorrect value */
18898 +    data temppredict;
18899 +      merge tempprob temppredict(in=_a);
18900 +      by node category;
18901 +      if _a then do;
18902 +        percentCorrect = statvalue;
18903 +        %if &validFlag eq Y %then %do;
18904 +          vpercentCorrect= vstatvalue;
18905 +        %end;
18906 +      end;
18907 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18908 +      %if &validFlag eq Y %then %do;
18909 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18910 +      %end;
18911 +      ;
18912 +      if missing(percentCorrect) then delete;
18913 +      drop target;
18914 +    run;
18916 +    /* build profittext */
18917 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18918 +      data tempprofittext(keep= node profittext profitloss);
18919 +        length profittext $800 profitloss 8.;
18920 +        retain profittext profitloss;
18922 +        merge tempprob
18923 +        %if &em_profitflag ne 0 %then %do;
18924 +          tempprofit
18925 +        %end;
18926 +        %else %if &em_lossflag ne 0 %then %do;
18927 +          temploss
18928 +        %end;
18929 +        ;
18930 +        by node category;
18932 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18933 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18934 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18935 +          %let profittype = ALL;
18936 +        %end;
18938 +        /* create the profitloss variable for nodecolor if selected */
18939 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18941 +        %if "&profittype" eq "ALL" %then %do;
18942 +          if strip(CATEGORY)="&targetEvent" then do;
18943 +            profitloss=statvalue;
18944 +          end;
18945 +          if first.node then do;
18946 +            %if &validFlag eq N %then %do;
18947 +             %if &em_profitflag ne 0 %then %do;
18948 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18949 +             %end;
18950 +             %if &em_lossflag ne 0 %then %do;
18951 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18952 +             %end;
18953 +            %end;
18954 +            %else %do;
18955 +             %if &em_profitflag ne 0 %then %do;
18956 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18956!+;
18957 +             %end;
18958 +             %if &em_lossflag ne 0 %then %do;
18959 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18960 +             %end;
18961 +            %end;
18962 +          end;
18963 +          else if last.node then do;
18964 +            %if &validFlag eq N %then %do;
18965 +             %if &em_profitflag ne 0 %then %do;
18966 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18967 +             %end;
18968 +             %if &em_lossflag ne 0 %then %do;
18969 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18970 +             %end;
18971 +             /*if CATEGORY="&targetEvent" then do;
18972 +               profitloss=statvalue;
18973 +             end;*/
18974 +            %end;
18975 +            %else %do;
18976 +             %if &em_profitflag ne 0 %then %do;
18977 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18977!+14.&EM_PROPERTY_SPLITPRECISION);
18978 +                if CATEGORY="&targetEvent" then do;
18979 +                 profitloss=ALTERNATIVE_PROFIT;
18980 +                end;
18981 +             %end;
18982 +             %if &em_lossflag ne 0 %then %do;
18983 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18983!+14.&EM_PROPERTY_SPLITPRECISION);
18984 +                if CATEGORY="&targetEvent" then do;
18985 +                  profitloss=ALTERNATIVE_LOSS;
18986 +                end;
18987 +             %end;
18988 +            %end;
18989 +            output;
18990 +          end;
18991 +          else do;
18992 +            %if &validFlag eq N %then %do;
18993 +             %if &em_profitflag ne 0 %then %do;
18994 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18995 +             %end;
18996 +             %if &em_lossflag ne 0 %then %do;
18997 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18998 +             %end;
18999 +            %end;
19000 +            %else %do;
19001 +             %if &em_profitflag ne 0 %then %do;
19002 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19002!+14.&EM_PROPERTY_SPLITPRECISION);
19003 +             %end;
19004 +             %if &em_lossflag ne 0 %then %do;
19005 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19005!+14.&EM_PROPERTY_SPLITPRECISION);
19006 +             %end;
19007 +            %end;
19008 +          end;
19009 +        %end;
19010 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19011 +          if strip(CATEGORY) = "&targetevent" then do;
19012 +            %if &validFlag eq N %then %do;
19013 +             %if &em_profitflag ne 0 %then %do;
19014 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19015 +             %end;
19016 +             %if &em_lossflag ne 0 %then %do;
19017 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19018 +             %end;
19019 +             profitloss=statvalue;
19020 +            %end;
19021 +            %else %do;
19022 +             %if &em_profitflag ne 0 %then %do;
19023 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19023!+;
19024 +                profitloss=ALTERNATIVE_PROFIT;
19025 +             %end;
19026 +             %if &em_lossflag ne 0 %then %do;
19027 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19028 +                profitloss=ALTERNATIVE_LOSS;
19029 +             %end;
19030 +            %end;
19031 +            output;
19032 +          end;
19033 +        %end;
19034 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19035 +          if strip(CATEGORY) = "&targetevent" then do;
19036 +            %if &validFlag eq N %then %do;
19037 +             profitloss=statvalue;
19038 +            %end;
19039 +            %else %do;
19040 +             %if &em_profitflag ne 0 %then %do;
19041 +                profitloss=ALTERNATIVE_PROFIT;
19042 +             %end;
19043 +             %if &em_lossflag ne 0 %then %do;
19044 +                profitloss=ALTERNATIVE_LOSS;
19045 +             %end;
19046 +            %end;
19047 +            output;
19048 +          end;
19049 +        %end;
19050 +      run;
19051 +    %end;
19053 +    data tempprob(keep= node probtext);
19054 +      length probtext $800;
19055 +      retain probtext;
19056 +      set tempprob ;
19057 +      by node;
19059 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19060 +      %let probtype = &EM_PROPERTY_TARGET;
19061 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19062 +        %let probtype = ALL;
19063 +      %end;
19065 +      %if "&probtype" eq "ALL" %then %do;
19066 +        if first.node then do;
19067 +          %if &validFlag eq N %then %do;
19068 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19069 +          %end;
19070 +          %else %do;
19071 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19072 +          %end;
19073 +        end;
19074 +        else if last.node then do;
19075 +          %if &validFlag eq N %then %do;
19076 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19077 +          %end;
19078 +          %else %do;
19079 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19080 +          %end;
19081 +          output;
19082 +        end;
19083 +        else do;
19084 +          %if &validFlag eq N %then %do;
19085 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19086 +          %end;
19087 +          %else %do;
19088 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19089 +          %end;
19090 +        end;
19091 +      %end;
19092 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19093 +        if strip(CATEGORY) = "&targetevent" then do;
19094 +          %if &validFlag eq N %then %do;
19095 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19096 +          %end;
19097 +          %else %do;
19098 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19099 +          %end;
19100 +          output;
19101 +        end;
19102 +      %end;
19103 +      %else %if "&probtype" eq "NONE" %then %do;
19104 +        if last.node then do;
19105 +          output;
19106 +        end;
19107 +      %end;
19108 +    run;
19109 +  %end;
19111 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19113 +  %let oldexists=0;
19114 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19115 +     data old_tree_plot;
19116 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19117 +        rename nodecolor=oldnodecolor;
19118 +     run;
19120 +     proc sort data=old_tree_plot;
19121 +        by node;
19122 +     run;
19124 +     %let oldexists=1;
19125 +  %end;
19127 +  data &EM_USER_TREE_PLOT;
19128 +    length textall $800;
19129 +    merge tempoutnodes temptargetused
19131 +    %if &em_intTarget eq Y %then %do;
19132 +      tempinterval
19133 +    %end;
19135 +    %if &em_classTarget eq Y %then %do;
19137 +      %if &validFlag eq N %then %do;
19138 +        tempn(rename=(statvalue=N))
19139 +      %end;
19140 +      %else %do;
19141 +        tempn
19142 +      %end;
19144 +      temppredict tempprob
19146 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19147 +        tempprofittext
19148 +      %end;
19149 +    %end;
19150 +    ;
19151 +    by node;
19153 +    /* build nodetext based on user selection */
19154 +    textall="";
19156 +    %if &em_intTarget eq Y %then %do;
19157 +    if tarlevel="INTERVAL" then do;
19158 +      /* Nodeid */
19159 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19160 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19161 +      %end;
19163 +      /* Target identifier if multiple targets are used */
19164 +      %if "&multipleTar" eq "Y" %then %do;
19165 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19166 +      %end;
19168 +      %if &validFlag eq Y %then %do;
19169 +         /* Column labels displayed in validflag eq Y only */
19170 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19171 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19171!+noquote ))";
19172 +         %end;
19174 +         /* Average values */
19175 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19176 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19177 +         %end;
19179 +         /* RASE */
19180 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19181 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19182 +         %end;
19184 +         /* Count */
19185 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19186 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19187 +         %end;
19188 +      %end;
19189 +      %else %do;
19190 +         /* Average values */
19191 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19192 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19193 +         %end;
19195 +         /* RASE */
19196 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19197 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19198 +         %end;
19200 +         /* Count */
19201 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19202 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19203 +         %end;
19204 +      %end;
19206 +      /* nodecolor */
19207 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19208 +        nodecolor=PREDICTION;
19209 +      %end;
19210 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19211 +        nodecolor=RASE;
19212 +      %end;
19213 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19214 +        nodecolor=1;
19215 +      %end;
19217 +    end;
19218 +    %end;
19219 +    %if &em_classTarget eq Y %then %do;
19220 +    if tarlevel^="INTERVAL" then  do;
19222 +      /* Nodeid */
19223 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19224 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19225 +      %end;
19226 +      /* Target identifier if multiple targets are used */
19227 +      %if "&multipleTar" eq "Y" %then %do;
19228 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19229 +      %end;
19231 +      /* Predicted values */
19232 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19233 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19234 +      %end;
19236 +      /* Column labels displayed in validflag eq Y only */
19237 +      %if "&ValidFlag" eq "Y" %then %do;
19238 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19239 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19239!+noquote ))";
19240 +        %end;
19241 +      %end;
19243 +      /* Target Values */
19244 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19245 +        textall=strip(textall)||"0A"x||strip(probtext);
19246 +      %end;
19248 +      /* include profit or loss for all target levels */
19249 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19250 +        textall=strip(textall)||"0A"x||strip(profittext);
19251 +      %end;
19253 +      %if &validFlag eq N %then %do;
19254 +        /* Percent Correct */
19255 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19256 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19257 +        %end;
19259 +         /* Count */
19260 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19261 +          %if "&adjusted" eq "N" %then %do;
19262 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19263 +          %end;
19264 +          %else %do;
19265 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19266 +          %end;
19267 +         %end;
19268 +      %end;
19269 +      %else %do;
19270 +        /* Percent Correct */
19271 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19272 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19273 +        %end;
19275 +         /* Count */
19276 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19277 +          %if "&adjusted" eq "N" %then %do;
19278 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19279 +          %end;
19280 +          %else %do;
19281 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19282 +          %end;
19283 +         %end;
19284 +      %end;
19286 +      /* nodecolor */
19287 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19288 +       %if &multipleTar ne Y %then %do;
19289 +        nodecolor=&predTarget;
19290 +       %end;
19291 +       %else %do;
19292 +         nodecolor=percentcorrect;
19293 +       %end;
19294 +      %end;
19295 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19296 +        nodecolor=percentcorrect;
19297 +      %end;
19298 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19299 +        nodecolor=1;
19300 +      %end;
19301 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19302 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19303 +          nodecolor=percentcorrect;
19304 +        %end;
19305 +        %else %do;
19306 +          nodecolor=profitloss;
19307 +        %end;
19308 +      %end;
19310 +    end;
19311 +    %end;
19312 +    %if &em_intTarget eq Y %then %do;
19313 +     drop  PREDICTION  TARGET TARLEVEL
19314 +     %if &ValidFlag eq Y %then %do;
19315 +         VPREDICTION
19316 +     %end;
19317 +     ;
19318 +    %end;
19319 +    %if &em_classTarget eq Y %then %do;
19320 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19321 +     %if &ValidFlag eq Y %then %do;
19322 +         VSTATVALUE
19323 +     %end;
19324 +     ;
19325 +    %end;
19327 +  run;
19329 +  /* add leaf index information to plotds - based on primary target only*/
19330 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19331 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19332 +      set &EM_USER_OUTSTATS;
19333 +      if ((statname="PROBABILITY"
19334 +      %if &validexist %then %do;
19335 +       or statname="VALID: PROBABILITY"
19336 +      %end;
19337 +      ) AND (CATEGORY="&TARGETEVENT")
19338 +      %if "&multipleTar" eq "Y" %then %do;
19339 +        AND (Target="%EM_TARGET")
19340 +      %end;
19341 +      );
19342 +    run;
19344 +    %if &validexist %then %do;
19345 +      proc sort data=tempprob; by node; run;
19346 +      %let vpredTarget = V%substr(&predTarget, 2);
19347 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19348 +         by node;
19349 +         id statname;
19350 +      run;
19351 +    %end;
19352 +  %end;
19353 +  %else %do;
19354 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19355 +      set &EM_USER_OUTSTATS;
19356 +      if ((statname="PREDICTION"
19357 +      %if &validexist %then %do;
19358 +       or statname="VALID: PREDICTION"
19359 +      %end;
19360 +      )
19361 +      %if "&multipleTar" eq "Y" %then %do;
19362 +        AND (Target="%EM_TARGET")
19363 +      %end;
19364 +      );
19365 +    run;
19366 +    %if &validexist %then %do;
19367 +      proc sort data=tempprob; by node; run;
19368 +      %let vpredTarget = V%substr(&predTarget, 2);
19369 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19370 +         by node;
19371 +         id statname;
19372 +      run;
19373 +    %end;
19374 +  %end;
19376 +  proc sort data=tempprob; by node; run;
19377 +  data tempoutnodes;
19378 +    merge tempoutnodes tempprob;
19379 +    by node;
19380 +  run;
19382 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19383 +  data tempnodes;
19384 +    retain traintotal validtotal;
19385 +    set tempnodes(where=(leaf ne . ));
19386 +    tprob=round(&predTarget, .01);
19387 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19388 +      percevent_train=round(tprob*100, .01);
19389 +    %end;
19390 +    %else %do;
19391 +      percevent_train=tprob;
19392 +    %end;
19394 +    perc_train=round((n/traintotal)*100, 0.01);
19395 +    /* leafwidth already has a *10 multiplier */
19396 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19398 +    %if &validexist %then %do;
19399 +      %let vpredTarget = V%substr(&predTarget,2);
19400 +      vprob=round(&vpredTarget, .01);
19401 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19402 +        percevent_valid=round(vprob*100, .01);
19403 +      %end;
19404 +      %else %do;
19405 +        percevent_valid=vprob;
19406 +      %end;
19407 +      perc_valid=round((vn/validtotal)*100, .01);
19408 +    %end;
19410 +    index=_N_;
19411 +    keep node index tprob perc_train percevent_train
19412 +    %if &validexist %then %do;
19413 +        vprob percevent_valid perc_valid
19414 +    %end;
19415 +    ;
19416 +  run;
19417 +  proc sort data=tempnodes; by node; run;
19418 +  data &EM_USER_TREE_PLOT;
19419 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19420 +    by node;
19421 +    if missing(node) then delete;
19422 +    %if &oldexists %then %do;
19423 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19424 +      drop oldnodecolor;
19425 +    %end;
19426 +    abovetext = compbl(abovetext);
19428 +    /* add variable labels */
19429 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19430 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19431 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19432 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19433 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19434 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19436 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19437 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19438 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19439 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19440 +          %end;
19441 +          %else %do;
19442 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19443 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19444 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19445 +          %end;
19446 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19448 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19449 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19450 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19451 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19452 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19453 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19454 +          %end;
19455 +          %else %do;
19456 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19457 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19458 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19459 +          %end;
19460 +    ;
19461 +  run;
19463 +  /* delete temporary tables */
19464 +  proc datasets lib=work nolist;
19465 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19466 +  run;
19468 +%mend em_tree_makePlotDs;
19472 +%macro em_tree_report;
19474 +   /* report properties */
19475 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19476 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19477 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19478 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19479 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19480 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19481 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19482 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19483 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19484 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19485 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19486 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19487 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19489 +   %let validexist=0;
19490 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19491 +     %let validexist=1;
19492 +   %end;
19494 +   /* determine if multiple targets will be processed */
19495 +   %let em_tree_multipleTargets=N;
19496 +   %let em_tree_numTarget=1;
19497 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19498 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19499 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19500 +         %let em_tree_multipleTargets=N;
19501 +      %end;
19502 +      %else %do;
19503 +        data _null_;
19504 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19505 +          if eof then
19506 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19507 +        run;
19509 +        %if &em_tree_numTarget gt 1 %then %do;
19510 +           %let em_tree_multipleTargets=Y;
19511 +        %end;
19512 +     %end;
19513 +   %end;
19515 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19517 +   /* variable importance */
19518 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19519 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19521 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19522 +     /* and the columns may not be generated                                                                                 */
19523 +     %let em_tree_cvexists=;
19524 +     %let em_tree_surrexists=.;
19525 +     data _null_;
19526 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19527 +       if eof then do ;
19528 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19529 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19530 +       end;
19531 +     run;
19533 +     data &EM_USER_OUTIMPORT;
19534 +         set &EM_USER_OUTIMPORT;
19535 +         /* format columns based on Precison value specified */
19536 +         format importance 15.&EM_PROPERTY_PRECISION
19537 +              %if &validexist %then %do;
19538 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19539 +              %end;
19540 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19541 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19542 +              %end;
19543 +         ;
19544 +     run;
19546 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19547 +     proc print data=&EM_USER_OUTIMPORT
19548 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19549 +          (where=((nrules>0) OR (nsurrogates>0)))
19550 +        %end;
19551 +        %else %do;
19552 +           (where=(nrules>0))
19553 +        %end;
19554 +        label noobs
19555 +        ;
19556 +     run;
19557 +     title10;
19559 +   %end;
19561 +   /* Sequence */
19562 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19563 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19564 +   data _null_ ;
19565 +      set &EM_USER_outseq (obs=2) end=eof ;
19566 +      if eof then do ;
19567 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19568 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19569 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19570 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19571 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19572 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19573 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19574 +      end;
19575 +    run;
19577 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19578 +      data &EM_USER_OUTSEQ;
19579 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19580 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19581 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19582 +           _XMISC_=_VMISC_
19583 +        %end;
19584 +        %if "&em_tree_aprof" ne "."  %then %do;
19585 +           _XAPROF_=_VAPROF_
19586 +           _XPROF_ = _VPROF_
19587 +        %end;
19588 +        %if "&em_tree_aloss" ne "."  %then %do;
19589 +           _XALOSS_=_VALOSS_
19590 +        %end;
19591 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19592 +           _XPASE_ = _VPASE_
19593 +           _XPMISC_ = _VPMISC_
19594 +        %end;
19596 +        ));
19597 +     %end;
19598 +     %else %do;
19599 +        set &EM_USER_OUTSEQ;
19600 +     %end;
19602 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19603 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19604 +            _MISC_   15.&EM_PROPERTY_PRECISION
19605 +         %end;
19606 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19607 +            _PASE_  15.&EM_PROPERTY_PRECISION
19608 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19609 +         %end;
19610 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19611 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19612 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19613 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19614 +            %end;
19615 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19616 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19617 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19618 +            %end;
19619 +         %end;
19620 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19621 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19622 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19623 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19624 +            %end;
19625 +         %end;
19626 +         %if "&em_tree_seq" ne "." %then %do;
19627 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19628 +         %end;
19629 +         %if "&em_tree_vseq" ne "." %then %do;
19630 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19631 +         %end;
19632 +         %if "&em_tree_aprof" ne "." %then %do;
19633 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19634 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19635 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19636 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19637 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19638 +           %end;
19639 +         %end;
19640 +         %else %if "&em_tree_aloss" ne "." %then %do;
19641 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19642 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19643 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19644 +           %end;
19645 +         %end;
19646 +      ;
19647 +    run;
19648 +   %end;
19650 +   /* Observation Based Importance */
19651 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19653 +      /* need to check for 0 obs */
19654 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19655 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19656 +      %let rc=%sysfunc(close(&dsid));
19658 +      %if &onobs %then %do;
19659 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19660 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19662 +         data &EM_USER_OUTOBSIMP;
19663 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19664 +           if _a;
19665 +           by _INPUT1_;
19666 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19667 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19668 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19669 +                   %end;
19670 +                   ;
19671 +         run;
19672 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19673 +      %end;
19674 +   %end;
19676 +  %end;
19678 +  /* create dataset to support tree diagram and icicle plot */
19679 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19680 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19682 +  /* display tree diagram */
19683 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19684 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19686 +  /* display icicle diagram */
19687 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19688 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19690 +  /* Leaf Statistics Plot */
19691 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19693 +  /* print leaf information to output window */
19694 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19696 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19697 +       by descending N;
19698 +     run;
19700 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19701 +     %local vn;
19702 +     data _null_;
19703 +       set t (obs=2) end=eof;
19704 +       if eof then do;
19705 +         call symput("vn", strip(put(vn, best.)));
19706 +       end;
19707 +     run;
19709 +     data t;
19710 +       set t;
19711 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19712 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19713 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19714 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19715 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19716 +       %end;
19717 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19718 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19719 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19720 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19721 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19722 +          %end;
19723 +       %end;
19724 +       ;
19725 +     run;
19727 +     /* determine if rase is found in t */
19728 +    %let dsid=%sysfunc(open(t,i));
19729 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19730 +    %let rc=%sysfunc(close(&dsid));
19732 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19733 +     proc print data=t noobs label;
19734 +       where tprob ne .;
19735 +       var node depth N tprob
19736 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19737 +         %if "&vn" ne "." %then %do;
19738 +           VN
19739 +         %end;
19740 +         vprob
19741 +       %end;
19742 +       %if &raseexists %then %do;
19743 +            RASE
19744 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19745 +              VRASE
19746 +            %end;
19747 +       %end;
19748 +       ;
19749 +     run;
19750 +     title10;
19751 +  %end;
19753 +  /* create plots that are done during training of node */
19754 +  /* display iterative plot, including reference line */
19755 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19756 +   /* %if &nleaves eq  %then %do; */
19757 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19758 +      data _null_;
19759 +        set &EM_USER_OUTTOPOLOGY end=eof;
19760 +        if eof then do;
19761 +          call symput('nleaves', LEAF);
19762 +        end;
19763 +      run;
19764 +   /* %end; */
19766 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19767 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19768 +  %end;
19770 +  /* display leaf statistics */
19771 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19773 +  /* stats by node if multiple targets = Y */
19774 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19775 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19776 +    data &EM_USER_OUTSTATS;
19777 +      set &EM_USER_OUTSTATS;
19779 +     * if STATNAME="TARGET" then delete;
19780 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19781 +      drop leaf;
19782 +    run;
19783 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19785 +  %end;
19786 +  %else %do;
19787 +    /* add outstats and outdescribe to spk but not results */
19788 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19789 +  %end;
19791 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _VASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 15 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_POTABILITY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_POTABILITY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 11 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 171 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable VN is uninitialized.
NOTE: There were 22 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 92 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 92 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 92 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 69 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 92 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 92 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 92 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 92 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 92 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 92 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 92 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 23 observations and 2 variables.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 3 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1095:196
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 23 observations read from the data set WORK.TEMPN.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 92 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 12 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 12 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable vprob is uninitialized.
NOTE: Variable perc_valid is uninitialized.
NOTE: Variable percevent_valid is uninitialized.
NOTE: There were 23 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 23 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 23 observations and 30 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 23 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      285:141
NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
19792
19793  *------------------------------------------------------------*;
19794  * End REPORT: Tree;
19795  *------------------------------------------------------------*;
 
19796  /* Reset EM Options */
19797  options formchar="|----|+|---+=|-/\<>*";
19798  options nocenter ls=256 ps=10000;
19799  goptions reset=all device=GIF NODISPLAY;
 
ERROR:  Windows error code: 1224 in hc_disk_truncate for C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\tree.sas7bcat, The requested operation cannot be performed on a file with a user-mapped section open.
19800  proc sort data=WORK.EM_USER_REPORT;
19801  by ID VIEW;
19802  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
ERROR:  Windows error code: 1224 in hc_disk_truncate for C:\Users\sbattina\Desktop\Water quality\Workspaces\EMWS1\tree.sas7bcat, The requested operation cannot be performed on a file with a user-mapped section open.
19803  proc sort data=EMWS1.Stat_CMeta_TRAIN out=WORK.SUBSETINMETA;
19804  by NAME;
19805  run;
 
NOTE: There were 11 observations read from the data set EMWS1.STAT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 11 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19806  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19807  by NAME;
19808  run;
 
NOTE: There were 11 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19809  data WORK.ASSESS_META;
19810  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19811  by NAME;
19812  run;
 
NOTE: There were 11 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 11 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 11 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19813  data EM_temp_assessMeta;
19814  set EMWS1.Tree_CMeta_TRAIN;
19815  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19816  run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19817  data EM_temp_assessdata;
19818  set EMWS1.Tree_TRAIN(keep=
19819  F_Potability
19820  I_Potability
19821  P_Potability0
19822  P_Potability1
19823  Q_Potability0
19824  Q_Potability1
19825  R_Potability0
19826  R_Potability1
19827  U_Potability
19828  _WARN_
19829  Potability
19830  );
19831  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2619 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2619 observations read from the data set EMWS1.STAT_TRAIN.
NOTE: There were 2619 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2619 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.11 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24109   %let _cn = %sysfunc(getoption(CENTER));
24110   options nocenter;
24111   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
24112   var STAT LABEL TRAIN
24113   TEST
24114   ;
24115   by TARGET TARGETLABEL;
24116   title9 ' ';
24117   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
24118   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24119   title10;
24120   options &_cn;
 
24121   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
24122   by DATAROLE TARGET TARGETLABEL;
24123   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 4 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24124   %let _cn = %sysfunc(getoption(CENTER));
24125   options nocenter;
24126   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
24127   var from into pct_row pct_col count percent
24128   ;
24129   by DATAROLE TARGET TARGETLABEL;
24130   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
24131   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
24132   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
24133   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
24134   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
24135   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
24136   where _TYPE_='PREDICTION';
24137   title9 ' ';
24138   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
24139   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
24140   title9;
24141   title10;
24142   options &_cn;
 
24143   %let _cn = %sysfunc(getoption(CENTER));
24144   options nocenter;
24145   data EMWS1.Tree_EMEVENTREPORT;
24146   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
24147   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
24147 ! FALSEEVENT
24148   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
24149      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
24150   FALSEEVENT=0;
24151   FALSENEVENT=0;
24152   TRUEEVENT=0;
24153   TRUENEVENT=0;
24154   set EMWS1.Tree_EMEVENTREPORT;
24155   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
24156   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
24157   title9 ' ';
24158   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
24159   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
24160   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24161   title10;
24162   options &_cn;
 
24163   proc datasets library=EMWS1 nolist;
24164   modify Tree_EMRANK;
24165   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
24166   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
24167   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
24168   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
24169   %let _cn = %sysfunc(getoption(CENTER));
24170   options nocenter;
24171   proc print data=EMWS1.Tree_EMRANK label noobs;
24172   var
24173   decile gain lift liftc resp respc N _meanP_;
24174   by
24175   notsorted DATAROLE
24176   notsorted TARGET
24177   notsorted TARGETLABEL
24178   ;
24179   title9 ' ';
24180   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
24181   run;
 
NOTE: There were 20 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24182   title10;
24183   options &_cn;
 
24184   proc datasets library=EMWS1 nolist;
24185   modify Tree_EMSCOREDIST;
24186   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
24187   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
24188   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
24189   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
